function ListingsViewModel(){function e(e,n){if(n===google.maps.places.PlacesServiceStatus.OK)for(var r=0;r<e.length;r++)t(e[r]);else alert("Google Places data on nearby locations is currently unavailable")}function t(e){var t=new google.maps.Marker({map:map,position:e.geometry.location,placeName:e.name,filtered:ko.observable(!0)});r.markersArray.push(t),google.maps.event.addListener(t,"click",r.markerClick)}function n(){for(var e=0;e<r.markersArray().length;e++)r.markersArray()[e].setVisible(!0),r.markersArray()[e].filtered(!0)}var r=this;r.markersArray=ko.observableArray([]),r.markerFilterText=ko.observable();var i={lat:1.280977,lng:103.851357};map=new google.maps.Map(document.getElementById("map"),{center:i,zoom:16,mapTypeControl:!0,mapTypeControlOptions:{position:google.maps.ControlPosition.LEFT_BOTTOM}}),infowindow=new google.maps.InfoWindow,service=new google.maps.places.PlacesService(map),service.nearbySearch({location:i,radius:1e3,type:["restaurant"]},e),service.nearbySearch({location:i,radius:1e3,type:["bar"]},e),r.markerClick=function(){var e=this;infowindow.setContent(e.placeName),infowindow.open(map,e),e.setAnimation(google.maps.Animation.BOUNCE),setTimeout(function(){e.setAnimation(null)},1400);var t={ll:e.position.lat()+","+e.position.lng(),intent:"match",query:e.placeName,client_id:"42K0YU5ZOS1HHB4OA0OYAMURDGN0FPH5DEQOT0XLJHWXPJ0O",client_secret:"2TBSDEB0WLTOEJF1C3KVLAPNAEGYYL1JF2XGCN3KGCP413EL",v:"20170111"},n=FS_API_URLROOT+$.param(t);$.ajax(n).done(function(t){var n=t.response.venues[0].name,r=t.response.venues[0].location.address,i=t.response.venues[0].location.crossStreet,o=t.response.venues[0].location.postalCode,a=t.response.venues[0].contact.formattedPhone,s=t.response.venues[0].url,u='<strong style="font-size:14px">'+(n||e.placeName)+"</strong><br><br><em>"+(r?r:"")+"</em><br><em>"+(i?i:"")+"</em><br><em>"+(o?o:"")+"</em><br><br><u>"+(a?a:"")+'</u><br><br><a href="'+s+'">'+(s?s:"")+'</a><br><br><em style="font-size:9px">Data provided by <a href="https://www.foursquare.com" target="_blank">Foursquare</a></em>';infowindow.setContent(u)}).fail(function(){var t="<strong>"+e.placeName+"</strong><br><br><em>Foursquare data not accessible</em>";infowindow.setContent(t)})},r.markersFilter=function(){if(r.markerFilterText())for(var e=0;e<r.markersArray().length;e++)~r.markersArray()[e].placeName.toLowerCase().indexOf(r.markerFilterText().toLowerCase())||(r.markersArray()[e].setVisible(!1),r.markersArray()[e].filtered(!1));else n()}}function initView(){ko.applyBindings(new ListingsViewModel)}function googleError(){$("#map").html("Google maps failed to load").css({color:"#777","font-size":"30px","line-height":"100vh","text-align":"center","vertical-align":"middle","background-color":"#aaa","text-shadow":"-1px -1px 1px #111, 2px 2px 1px #bbb"}),$("label").css("display","none")}!function(){!function(e){var t=this||(0,eval)("this"),n=t.document,r=t.navigator,i=t.jQuery,o=t.JSON;!function(e){"function"==typeof define&&define.amd?define(["exports","require"],e):e("object"==typeof exports&&"object"==typeof module?module.exports||exports:t.ko={})}(function(a,s){function u(e,t){return(null===e||typeof e in m)&&e===t}function c(t,n){var r;return function(){r||(r=g.a.setTimeout(function(){r=e,t()},n))}}function l(e,t){var n;return function(){clearTimeout(n),n=g.a.setTimeout(e,t)}}function f(e,t){t&&t!==v?"beforeChange"===t?this.Lb(e):this.Ha(e,t):this.Mb(e)}function p(e,t){null!==t&&t.k&&t.k()}function d(e,t){var n=this.Ic,r=n[T];r.S||(this.lb&&this.Ma[t]?(n.Qb(t,e,this.Ma[t]),this.Ma[t]=null,--this.lb):r.r[t]||n.Qb(t,e,r.s?{ia:e}:n.wc(e)))}function h(e,t,n,r){g.d[e]={init:function(e,i,o,a,s){var u,c;return g.m(function(){var o=i(),a=g.a.c(o),a=!n!=!a,l=!c;(l||t||a!==u)&&(l&&g.va.Aa()&&(c=g.a.ua(g.f.childNodes(e),!0)),a?(l||g.f.da(e,g.a.ua(c)),g.eb(r?r(s,o):s,e)):g.f.xa(e),u=a)},null,{i:e}),{controlsDescendantBindings:!0}}},g.h.ta[e]=!1,g.f.Z[e]=!0}var g="undefined"!=typeof a?a:{};g.b=function(e,t){for(var n=e.split("."),r=g,i=0;i<n.length-1;i++)r=r[n[i]];r[n[n.length-1]]=t},g.G=function(e,t,n){e[t]=n},g.version="3.4.1",g.b("version",g.version),g.options={deferUpdates:!1,useOnlyNativeEvents:!1},g.a=function(){function a(e,t){for(var n in e)e.hasOwnProperty(n)&&t(n,e[n])}function s(e,t){if(t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}function u(e,t){return e.__proto__=t,e}function c(e,t,n,r){var i=e[t].match(v)||[];g.a.q(n.match(v),function(e){g.a.pa(i,e,r)}),e[t]=i.join(" ")}var l={__proto__:[]}instanceof Array,f="function"==typeof Symbol,p={},d={};p[r&&/Firefox\/2/i.test(r.userAgent)?"KeyboardEvent":"UIEvents"]=["keyup","keydown","keypress"],p.MouseEvents="click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave".split(" "),a(p,function(e,t){if(t.length)for(var n=0,r=t.length;n<r;n++)d[t[n]]=e});var h={propertychange:!0},m=n&&function(){for(var t=3,r=n.createElement("div"),i=r.getElementsByTagName("i");r.innerHTML="<!--[if gt IE "+ ++t+"]><i></i><![endif]-->",i[0];);return 4<t?t:e}(),v=/\S+/g;return{ec:["authenticity_token",/^__RequestVerificationToken(_.*)?$/],q:function(e,t){for(var n=0,r=e.length;n<r;n++)t(e[n],n)},o:function(e,t){if("function"==typeof Array.prototype.indexOf)return Array.prototype.indexOf.call(e,t);for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},Tb:function(e,t,n){for(var r=0,i=e.length;r<i;r++)if(t.call(n,e[r],r))return e[r];return null},La:function(e,t){var n=g.a.o(e,t);0<n?e.splice(n,1):0===n&&e.shift()},Ub:function(e){e=e||[];for(var t=[],n=0,r=e.length;n<r;n++)0>g.a.o(t,e[n])&&t.push(e[n]);return t},fb:function(e,t){e=e||[];for(var n=[],r=0,i=e.length;r<i;r++)n.push(t(e[r],r));return n},Ka:function(e,t){e=e||[];for(var n=[],r=0,i=e.length;r<i;r++)t(e[r],r)&&n.push(e[r]);return n},ra:function(e,t){if(t instanceof Array)e.push.apply(e,t);else for(var n=0,r=t.length;n<r;n++)e.push(t[n]);return e},pa:function(e,t,n){var r=g.a.o(g.a.zb(e),t);0>r?n&&e.push(t):n||e.splice(r,1)},ka:l,extend:s,Xa:u,Ya:l?u:s,D:a,Ca:function(e,t){if(!e)return e;var n,r={};for(n in e)e.hasOwnProperty(n)&&(r[n]=t(e[n],n,e));return r},ob:function(e){for(;e.firstChild;)g.removeNode(e.firstChild)},lc:function(e){e=g.a.V(e);for(var t=(e[0]&&e[0].ownerDocument||n).createElement("div"),r=0,i=e.length;r<i;r++)t.appendChild(g.$(e[r]));return t},ua:function(e,t){for(var n=0,r=e.length,i=[];n<r;n++){var o=e[n].cloneNode(!0);i.push(t?g.$(o):o)}return i},da:function(e,t){if(g.a.ob(e),t)for(var n=0,r=t.length;n<r;n++)e.appendChild(t[n])},sc:function(e,t){var n=e.nodeType?[e]:e;if(0<n.length){for(var r=n[0],i=r.parentNode,o=0,a=t.length;o<a;o++)i.insertBefore(t[o],r);for(o=0,a=n.length;o<a;o++)g.removeNode(n[o])}},za:function(e,t){if(e.length){for(t=8===t.nodeType&&t.parentNode||t;e.length&&e[0].parentNode!==t;)e.splice(0,1);for(;1<e.length&&e[e.length-1].parentNode!==t;)e.length--;if(1<e.length){var n=e[0],r=e[e.length-1];for(e.length=0;n!==r;)e.push(n),n=n.nextSibling;e.push(r)}}return e},uc:function(e,t){7>m?e.setAttribute("selected",t):e.selected=t},$a:function(t){return null===t||t===e?"":t.trim?t.trim():t.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},od:function(e,t){return e=e||"",!(t.length>e.length)&&e.substring(0,t.length)===t},Nc:function(e,t){if(e===t)return!0;if(11===e.nodeType)return!1;if(t.contains)return t.contains(3===e.nodeType?e.parentNode:e);if(t.compareDocumentPosition)return 16==(16&t.compareDocumentPosition(e));for(;e&&e!=t;)e=e.parentNode;return!!e},nb:function(e){return g.a.Nc(e,e.ownerDocument.documentElement)},Rb:function(e){return!!g.a.Tb(e,g.a.nb)},A:function(e){return e&&e.tagName&&e.tagName.toLowerCase()},Xb:function(e){return g.onError?function(){try{return e.apply(this,arguments)}catch(e){throw g.onError&&g.onError(e),e}}:e},setTimeout:function(e,t){return setTimeout(g.a.Xb(e),t)},bc:function(e){setTimeout(function(){throw g.onError&&g.onError(e),e},0)},p:function(e,t,n){var r=g.a.Xb(n);if(n=m&&h[t],g.options.useOnlyNativeEvents||n||!i)if(n||"function"!=typeof e.addEventListener){if("undefined"==typeof e.attachEvent)throw Error("Browser doesn't support addEventListener or attachEvent");var o=function(t){r.call(e,t)},a="on"+t;e.attachEvent(a,o),g.a.F.oa(e,function(){e.detachEvent(a,o)})}else e.addEventListener(t,r,!1);else i(e).bind(t,r)},Da:function(e,r){if(!e||!e.nodeType)throw Error("element must be a DOM node when calling triggerEvent");var o;if("input"===g.a.A(e)&&e.type&&"click"==r.toLowerCase()?(o=e.type,o="checkbox"==o||"radio"==o):o=!1,g.options.useOnlyNativeEvents||!i||o)if("function"==typeof n.createEvent){if("function"!=typeof e.dispatchEvent)throw Error("The supplied element doesn't support dispatchEvent");o=n.createEvent(d[r]||"HTMLEvents"),o.initEvent(r,!0,!0,t,0,0,0,0,0,!1,!1,!1,!1,0,e),e.dispatchEvent(o)}else if(o&&e.click)e.click();else{if("undefined"==typeof e.fireEvent)throw Error("Browser doesn't support triggering events");e.fireEvent("on"+r)}else i(e).trigger(r)},c:function(e){return g.H(e)?e():e},zb:function(e){return g.H(e)?e.t():e},bb:function(e,t,n){var r;t&&("object"==typeof e.classList?(r=e.classList[n?"add":"remove"],g.a.q(t.match(v),function(t){r.call(e.classList,t)})):"string"==typeof e.className.baseVal?c(e.className,"baseVal",t,n):c(e,"className",t,n))},Za:function(t,n){var r=g.a.c(n);null!==r&&r!==e||(r="");var i=g.f.firstChild(t);!i||3!=i.nodeType||g.f.nextSibling(i)?g.f.da(t,[t.ownerDocument.createTextNode(r)]):i.data=r,g.a.Sc(t)},tc:function(e,t){if(e.name=t,7>=m)try{e.mergeAttributes(n.createElement("<input name='"+e.name+"'/>"),!1)}catch(e){}},Sc:function(e){9<=m&&(e=1==e.nodeType?e:e.parentNode,e.style&&(e.style.zoom=e.style.zoom))},Oc:function(e){if(m){var t=e.style.width;e.style.width=0,e.style.width=t}},jd:function(e,t){e=g.a.c(e),t=g.a.c(t);for(var n=[],r=e;r<=t;r++)n.push(r);return n},V:function(e){for(var t=[],n=0,r=e.length;n<r;n++)t.push(e[n]);return t},$b:function(e){return f?Symbol(e):e},sd:6===m,ud:7===m,C:m,gc:function(e,t){for(var n=g.a.V(e.getElementsByTagName("input")).concat(g.a.V(e.getElementsByTagName("textarea"))),r="string"==typeof t?function(e){return e.name===t}:function(e){return t.test(e.name)},i=[],o=n.length-1;0<=o;o--)r(n[o])&&i.push(n[o]);return i},fd:function(e){return"string"==typeof e&&(e=g.a.$a(e))?o&&o.parse?o.parse(e):new Function("return "+e)():null},Eb:function(e,t,n){if(!o||!o.stringify)throw Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");return o.stringify(g.a.c(e),t,n)},gd:function(e,t,r){r=r||{};var i=r.params||{},o=r.includeFields||this.ec,s=e;if("object"==typeof e&&"form"===g.a.A(e))for(var s=e.action,u=o.length-1;0<=u;u--)for(var c=g.a.gc(e,o[u]),l=c.length-1;0<=l;l--)i[c[l].name]=c[l].value;t=g.a.c(t);var f=n.createElement("form");f.style.display="none",f.action=s,f.method="post";for(var p in t)e=n.createElement("input"),e.type="hidden",e.name=p,e.value=g.a.Eb(g.a.c(t[p])),f.appendChild(e);a(i,function(e,t){var r=n.createElement("input");r.type="hidden",r.name=e,r.value=t,f.appendChild(r)}),n.body.appendChild(f),r.submitter?r.submitter(f):f.submit(),setTimeout(function(){f.parentNode.removeChild(f)},0)}}}(),g.b("utils",g.a),g.b("utils.arrayForEach",g.a.q),g.b("utils.arrayFirst",g.a.Tb),g.b("utils.arrayFilter",g.a.Ka),g.b("utils.arrayGetDistinctValues",g.a.Ub),g.b("utils.arrayIndexOf",g.a.o),g.b("utils.arrayMap",g.a.fb),g.b("utils.arrayPushAll",g.a.ra),g.b("utils.arrayRemoveItem",g.a.La),g.b("utils.extend",g.a.extend),g.b("utils.fieldsIncludedWithJsonPost",g.a.ec),g.b("utils.getFormFields",g.a.gc),g.b("utils.peekObservable",g.a.zb),g.b("utils.postJson",g.a.gd),g.b("utils.parseJson",g.a.fd),g.b("utils.registerEventHandler",g.a.p),g.b("utils.stringifyJson",g.a.Eb),g.b("utils.range",g.a.jd),g.b("utils.toggleDomNodeCssClass",g.a.bb),g.b("utils.triggerEvent",g.a.Da),g.b("utils.unwrapObservable",g.a.c),g.b("utils.objectForEach",g.a.D),g.b("utils.addOrRemoveItem",g.a.pa),g.b("utils.setTextContent",g.a.Za),g.b("unwrap",g.a.c),Function.prototype.bind||(Function.prototype.bind=function(e){var t=this;if(1===arguments.length)return function(){return t.apply(e,arguments)};var n=Array.prototype.slice.call(arguments,1);return function(){var r=n.slice(0);return r.push.apply(r,arguments),t.apply(e,r)}}),g.a.e=new function(){function t(t,o){var a=t[r];if(!a||"null"===a||!i[a]){if(!o)return e;a=t[r]="ko"+n++,i[a]={}}return i[a]}var n=0,r="__ko__"+(new Date).getTime(),i={};return{get:function(n,r){var i=t(n,!1);return i===e?e:i[r]},set:function(n,r,i){i===e&&t(n,!1)===e||(t(n,!0)[r]=i)},clear:function(e){var t=e[r];return!!t&&(delete i[t],e[r]=null,!0)},I:function(){return n++ +r}}},g.b("utils.domData",g.a.e),g.b("utils.domData.clear",g.a.e.clear),g.a.F=new function(){function t(t,n){var i=g.a.e.get(t,r);return i===e&&n&&(i=[],g.a.e.set(t,r,i)),i}function n(e){var r=t(e,!1);if(r)for(var r=r.slice(0),i=0;i<r.length;i++)r[i](e);if(g.a.e.clear(e),g.a.F.cleanExternalData(e),a[e.nodeType])for(r=e.firstChild;e=r;)r=e.nextSibling,8===e.nodeType&&n(e)}var r=g.a.e.I(),o={1:!0,8:!0,9:!0},a={1:!0,9:!0};return{oa:function(e,n){if("function"!=typeof n)throw Error("Callback must be a function");t(e,!0).push(n)},rc:function(n,i){var o=t(n,!1);o&&(g.a.La(o,i),0==o.length&&g.a.e.set(n,r,e))},$:function(e){if(o[e.nodeType]&&(n(e),a[e.nodeType])){var t=[];g.a.ra(t,e.getElementsByTagName("*"));for(var r=0,i=t.length;r<i;r++)n(t[r])}return e},removeNode:function(e){g.$(e),e.parentNode&&e.parentNode.removeChild(e)},cleanExternalData:function(e){i&&"function"==typeof i.cleanData&&i.cleanData([e])}}},g.$=g.a.F.$,g.removeNode=g.a.F.removeNode,g.b("cleanNode",g.$),g.b("removeNode",g.removeNode),g.b("utils.domNodeDisposal",g.a.F),g.b("utils.domNodeDisposal.addDisposeCallback",g.a.F.oa),g.b("utils.domNodeDisposal.removeDisposeCallback",g.a.F.rc),function(){var r=[0,"",""],o=[1,"<table>","</table>"],a=[3,"<table><tbody><tr>","</tr></tbody></table>"],s=[1,"<select multiple='multiple'>","</select>"],u={thead:o,tbody:o,tfoot:o,tr:[2,"<table><tbody>","</tbody></table>"],td:a,th:a,option:s,optgroup:s},c=8>=g.a.C;g.a.ma=function(e,o){var a;if(i){if(i.parseHTML)a=i.parseHTML(e,o)||[];else if((a=i.clean([e],o))&&a[0]){for(var s=a[0];s.parentNode&&11!==s.parentNode.nodeType;)s=s.parentNode;s.parentNode&&s.parentNode.removeChild(s)}}else{(a=o)||(a=n);var l,s=a.parentWindow||a.defaultView||t,f=g.a.$a(e).toLowerCase(),p=a.createElement("div");for(l=(f=f.match(/^<([a-z]+)[ >]/))&&u[f[1]]||r,f=l[0],l="ignored<div>"+l[1]+e+l[2]+"</div>","function"==typeof s.innerShiv?p.appendChild(s.innerShiv(l)):(c&&a.appendChild(p),p.innerHTML=l,c&&p.parentNode.removeChild(p));f--;)p=p.lastChild;a=g.a.V(p.lastChild.childNodes)}return a},g.a.Cb=function(t,n){if(g.a.ob(t),n=g.a.c(n),null!==n&&n!==e)if("string"!=typeof n&&(n=n.toString()),i)i(t).html(n);else for(var r=g.a.ma(n,t.ownerDocument),o=0;o<r.length;o++)t.appendChild(r[o])}}(),g.b("utils.parseHtmlFragment",g.a.ma),g.b("utils.setHtml",g.a.Cb),g.M=function(){function t(e,n){if(e)if(8==e.nodeType){var r=g.M.nc(e.nodeValue);null!=r&&n.push({Mc:e,dd:r})}else if(1==e.nodeType)for(var r=0,i=e.childNodes,o=i.length;r<o;r++)t(i[r],n)}var n={};return{wb:function(e){if("function"!=typeof e)throw Error("You can only pass a function to ko.memoization.memoize()");var t=(4294967296*(1+Math.random())|0).toString(16).substring(1)+(4294967296*(1+Math.random())|0).toString(16).substring(1);return n[t]=e,"<!--[ko_memo:"+t+"]-->"},zc:function(t,r){var i=n[t];if(i===e)throw Error("Couldn't find any memo with ID "+t+". Perhaps it's already been unmemoized.");try{return i.apply(null,r||[]),!0}finally{delete n[t]}},Ac:function(e,n){var r=[];t(e,r);for(var i=0,o=r.length;i<o;i++){var a=r[i].Mc,s=[a];n&&g.a.ra(s,n),g.M.zc(r[i].dd,s),a.nodeValue="",a.parentNode&&a.parentNode.removeChild(a)}},nc:function(e){return(e=e.match(/^\[ko_memo\:(.*?)\]$/))?e[1]:null}}}(),g.b("memoization",g.M),g.b("memoization.memoize",g.M.wb),g.b("memoization.unmemoize",g.M.zc),g.b("memoization.parseMemoText",g.M.nc),g.b("memoization.unmemoizeDomNodeAndDescendants",g.M.Ac),g.Y=function(){function e(){if(o)for(var e,t=o,n=0;s<o;)if(e=i[s++]){if(s>t){if(5e3<=++n){s=o,g.a.bc(Error("'Too much recursion' after processing "+n+" task groups."));break}t=o}try{e()}catch(e){g.a.bc(e)}}}function r(){e(),s=o=i.length=0}var i=[],o=0,a=1,s=0;return{scheduler:t.MutationObserver?function(e){var t=n.createElement("div");return new MutationObserver(e).observe(t,{attributes:!0}),function(){t.classList.toggle("foo")}}(r):n&&"onreadystatechange"in n.createElement("script")?function(e){var t=n.createElement("script");t.onreadystatechange=function(){t.onreadystatechange=null,n.documentElement.removeChild(t),t=null,e()},n.documentElement.appendChild(t)}:function(e){setTimeout(e,0)},Wa:function(e){return o||g.Y.scheduler(r),i[o++]=e,a++},cancel:function(e){e-=a-o,e>=s&&e<o&&(i[e]=null)},resetForTesting:function(){var e=o-s;return s=o=i.length=0,e},nd:e}}(),g.b("tasks",g.Y),g.b("tasks.schedule",g.Y.Wa),g.b("tasks.runEarly",g.Y.nd),g.ya={throttle:function(e,t){e.throttleEvaluation=t;var n=null;return g.B({read:e,write:function(r){clearTimeout(n),n=g.a.setTimeout(function(){e(r)},t)}})},rateLimit:function(e,t){var n,r,i;"number"==typeof t?n=t:(n=t.timeout,r=t.method),e.cb=!1,i="notifyWhenChangesStop"==r?l:c,e.Ta(function(e){return i(e,n)})},deferred:function(t,n){if(!0!==n)throw Error("The 'deferred' extender only accepts the value 'true', because it is not supported to turn deferral off once enabled.");t.cb||(t.cb=!0,t.Ta(function(n){var r;return function(){g.Y.cancel(r),r=g.Y.Wa(n),t.notifySubscribers(e,"dirty")}}))},notify:function(e,t){e.equalityComparer="always"==t?null:u}};var m={undefined:1,boolean:1,number:1,string:1};g.b("extenders",g.ya),g.xc=function(e,t,n){this.ia=e,this.gb=t,this.Lc=n,this.S=!1,g.G(this,"dispose",this.k)},g.xc.prototype.k=function(){this.S=!0,this.Lc()},g.J=function(){g.a.Ya(this,y),y.rb(this)};var v="change",y={rb:function(e){e.K={},e.Ob=1},X:function(e,t,n){var r=this;n=n||v;var i=new g.xc(r,t?e.bind(t):e,function(){g.a.La(r.K[n],i),r.Ia&&r.Ia(n)});return r.sa&&r.sa(n),r.K[n]||(r.K[n]=[]),r.K[n].push(i),i},notifySubscribers:function(e,t){if(t=t||v,t===v&&this.Ib(),this.Pa(t))try{g.l.Vb();for(var n,r=this.K[t].slice(0),i=0;n=r[i];++i)n.S||n.gb(e)}finally{g.l.end()}},Na:function(){return this.Ob},Vc:function(e){return this.Na()!==e},Ib:function(){++this.Ob},Ta:function(e){var t,n,r,i=this,o=g.H(i);i.Ha||(i.Ha=i.notifySubscribers,i.notifySubscribers=f);var a=e(function(){i.Nb=!1,o&&r===i&&(r=i()),t=!1,i.tb(n,r)&&i.Ha(n=r)});i.Mb=function(e){i.Nb=t=!0,r=e,a()},i.Lb=function(e){t||(n=e,i.Ha(e,"beforeChange"))}},Pa:function(e){return this.K[e]&&this.K[e].length},Tc:function(e){if(e)return this.K[e]&&this.K[e].length||0;var t=0;return g.a.D(this.K,function(e,n){"dirty"!==e&&(t+=n.length)}),t},tb:function(e,t){return!this.equalityComparer||!this.equalityComparer(e,t)},extend:function(e){var t=this;return e&&g.a.D(e,function(e,n){var r=g.ya[e];"function"==typeof r&&(t=r(t,n)||t)}),t}};g.G(y,"subscribe",y.X),g.G(y,"extend",y.extend),g.G(y,"getSubscriptionsCount",y.Tc),g.a.ka&&g.a.Xa(y,Function.prototype),g.J.fn=y,g.jc=function(e){return null!=e&&"function"==typeof e.X&&"function"==typeof e.notifySubscribers},g.b("subscribable",g.J),g.b("isSubscribable",g.jc),g.va=g.l=function(){function e(e){r.push(n),n=e}function t(){n=r.pop()}var n,r=[],i=0;return{Vb:e,end:t,qc:function(e){if(n){if(!g.jc(e))throw Error("Only subscribable things can act as dependencies");n.gb.call(n.Hc,e,e.Dc||(e.Dc=++i))}},w:function(n,r,i){try{return e(),n.apply(r,i||[])}finally{t()}},Aa:function(){if(n)return n.m.Aa()},Sa:function(){if(n)return n.Sa}}}(),g.b("computedContext",g.va),g.b("computedContext.getDependenciesCount",g.va.Aa),g.b("computedContext.isInitial",g.va.Sa),g.b("ignoreDependencies",g.rd=g.l.w);var b=g.a.$b("_latestValue");g.N=function(e){function t(){return 0<arguments.length?(t.tb(t[b],arguments[0])&&(t.ga(),t[b]=arguments[0],t.fa()),this):(g.l.qc(t),t[b])}return t[b]=e,g.a.ka||g.a.extend(t,g.J.fn),g.J.fn.rb(t),g.a.Ya(t,x),g.options.deferUpdates&&g.ya.deferred(t,!0),t};var x={equalityComparer:u,t:function(){return this[b]},fa:function(){this.notifySubscribers(this[b])},ga:function(){this.notifySubscribers(this[b],"beforeChange")}};g.a.ka&&g.a.Xa(x,g.J.fn);var w=g.N.hd="__ko_proto__";x[w]=g.N,g.Oa=function(t,n){return null!==t&&t!==e&&t[w]!==e&&(t[w]===n||g.Oa(t[w],n))},g.H=function(e){return g.Oa(e,g.N)},g.Ba=function(e){return!!("function"==typeof e&&e[w]===g.N||"function"==typeof e&&e[w]===g.B&&e.Wc)},g.b("observable",g.N),g.b("isObservable",g.H),g.b("isWriteableObservable",g.Ba),g.b("isWritableObservable",g.Ba),g.b("observable.fn",x),g.G(x,"peek",x.t),g.G(x,"valueHasMutated",x.fa),g.G(x,"valueWillMutate",x.ga),g.la=function(e){if(e=e||[],"object"!=typeof e||!("length"in e))throw Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");return e=g.N(e),g.a.Ya(e,g.la.fn),e.extend({trackArrayChanges:!0})},g.la.fn={remove:function(e){for(var t=this.t(),n=[],r="function"!=typeof e||g.H(e)?function(t){return t===e}:e,i=0;i<t.length;i++){var o=t[i];r(o)&&(0===n.length&&this.ga(),n.push(o),t.splice(i,1),i--)}return n.length&&this.fa(),n},removeAll:function(t){if(t===e){var n=this.t(),r=n.slice(0);return this.ga(),n.splice(0,n.length),this.fa(),r}return t?this.remove(function(e){return 0<=g.a.o(t,e)}):[]},destroy:function(e){var t=this.t(),n="function"!=typeof e||g.H(e)?function(t){return t===e}:e;this.ga();for(var r=t.length-1;0<=r;r--)n(t[r])&&(t[r]._destroy=!0);this.fa()},destroyAll:function(t){return t===e?this.destroy(function(){return!0}):t?this.destroy(function(e){return 0<=g.a.o(t,e)}):[]},indexOf:function(e){var t=this();return g.a.o(t,e)},replace:function(e,t){var n=this.indexOf(e);0<=n&&(this.ga(),this.t()[n]=t,this.fa())}},g.a.ka&&g.a.Xa(g.la.fn,g.N.fn),g.a.q("pop push reverse shift sort splice unshift".split(" "),function(e){g.la.fn[e]=function(){var t=this.t();this.ga(),this.Wb(t,e,arguments);var n=t[e].apply(t,arguments);return this.fa(),n===t?this:n}}),g.a.q(["slice"],function(e){g.la.fn[e]=function(){var t=this();return t[e].apply(t,arguments)}}),g.b("observableArray",g.la),g.ya.trackArrayChanges=function(t,n){function r(){if(!a){a=!0,o=t.notifySubscribers,t.notifySubscribers=function(e,t){return t&&t!==v||++u,o.apply(this,arguments)};var e=[].concat(t.t()||[]);s=null,i=t.X(function(n){if(n=[].concat(n||[]),t.Pa("arrayChange")){var r;(!s||1<u)&&(s=g.a.ib(e,n,t.hb)),r=s}e=n,s=null,u=0,r&&r.length&&t.notifySubscribers(r,"arrayChange")})}}if(t.hb={},n&&"object"==typeof n&&g.a.extend(t.hb,n),t.hb.sparse=!0,!t.Wb){var i,o,a=!1,s=null,u=0,c=t.sa,l=t.Ia;t.sa=function(e){c&&c.call(t,e),"arrayChange"===e&&r()},t.Ia=function(n){l&&l.call(t,n),"arrayChange"!==n||t.Pa("arrayChange")||(o&&(t.notifySubscribers=o,o=e),i.k(),a=!1)},t.Wb=function(e,t,n){function r(e,t,n){return i[i.length]={status:e,value:t,index:n}}if(a&&!u){var i=[],o=e.length,c=n.length,l=0;switch(t){case"push":l=o;case"unshift":for(t=0;t<c;t++)r("added",n[t],l+t);break;case"pop":l=o-1;case"shift":o&&r("deleted",e[l],l);break;case"splice":t=Math.min(Math.max(0,0>n[0]?o+n[0]:n[0]),o);for(var o=1===c?o:Math.min(t+(n[1]||0),o),c=t+c-2,l=Math.max(o,c),f=[],p=[],d=2;t<l;++t,++d)t<o&&p.push(r("deleted",e[t],t)),t<c&&f.push(r("added",n[d],t));g.a.fc(p,f);break;default:return}s=i}}}};var T=g.a.$b("_state");g.m=g.B=function(t,n,r){function i(){if(0<arguments.length){if("function"!=typeof o)throw Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");return o.apply(a.pb,arguments),this}return g.l.qc(i),(a.T||a.s&&i.Qa())&&i.aa(),a.U}if("object"==typeof t?r=t:(r=r||{},t&&(r.read=t)),"function"!=typeof r.read)throw Error("Pass a function that returns the value of the ko.computed");var o=r.write,a={U:e,T:!0,Ra:!1,Fb:!1,S:!1,Va:!1,s:!1,kd:r.read,pb:n||r.owner,i:r.disposeWhenNodeIsRemoved||r.i||null,wa:r.disposeWhen||r.wa,mb:null,r:{},L:0,dc:null};return i[T]=a,i.Wc="function"==typeof o,g.a.ka||g.a.extend(i,g.J.fn),g.J.fn.rb(i),g.a.Ya(i,C),r.pure?(a.Va=!0,a.s=!0,g.a.extend(i,k)):r.deferEvaluation&&g.a.extend(i,E),g.options.deferUpdates&&g.ya.deferred(i,!0),a.i&&(a.Fb=!0,a.i.nodeType||(a.i=null)),a.s||r.deferEvaluation||i.aa(),a.i&&i.ba()&&g.a.F.oa(a.i,a.mb=function(){i.k()}),i};var C={equalityComparer:u,Aa:function(){return this[T].L},Qb:function(e,t,n){if(this[T].Va&&t===this)throw Error("A 'pure' computed must not be called recursively");this[T].r[e]=n,n.Ga=this[T].L++,n.na=t.Na()},Qa:function(){var e,t,n=this[T].r;for(e in n)if(n.hasOwnProperty(e)&&(t=n[e],t.ia.Vc(t.na)))return!0},cd:function(){this.Fa&&!this[T].Ra&&this.Fa()},ba:function(){return this[T].T||0<this[T].L},md:function(){this.Nb||this.cc()},wc:function(e){if(e.cb&&!this[T].i){var t=e.X(this.cd,this,"dirty"),n=e.X(this.md,this);return{ia:e,k:function(){t.k(),n.k()}}}return e.X(this.cc,this)},cc:function(){var e=this,t=e.throttleEvaluation;t&&0<=t?(clearTimeout(this[T].dc),this[T].dc=g.a.setTimeout(function(){e.aa(!0)},t)):e.Fa?e.Fa():e.aa(!0)},aa:function(e){var t=this[T],n=t.wa,r=!1;if(!t.Ra&&!t.S){if(t.i&&!g.a.nb(t.i)||n&&n()){if(!t.Fb)return void this.k()}else t.Fb=!1;t.Ra=!0;try{r=this.Rc(e)}finally{t.Ra=!1}return t.L||this.k(),r}},Rc:function(t){var n=this[T],r=!1,i=n.Va?e:!n.L,o={Ic:this,Ma:n.r,lb:n.L};return g.l.Vb({Hc:o,gb:d,m:this,Sa:i}),n.r={},n.L=0,o=this.Qc(n,o),this.tb(n.U,o)&&(n.s||this.notifySubscribers(n.U,"beforeChange"),n.U=o,n.s?this.Ib():t&&this.notifySubscribers(n.U),r=!0),i&&this.notifySubscribers(n.U,"awake"),r},Qc:function(e,t){try{var n=e.kd;return e.pb?n.call(e.pb):n()}finally{g.l.end(),t.lb&&!e.s&&g.a.D(t.Ma,p),e.T=!1}},t:function(){var e=this[T];return(e.T&&!e.L||e.s&&this.Qa())&&this.aa(),e.U},Ta:function(e){g.J.fn.Ta.call(this,e),this.Fa=function(){this.Lb(this[T].U),this[T].T=!0,this.Mb(this)}},k:function(){var e=this[T];!e.s&&e.r&&g.a.D(e.r,function(e,t){t.k&&t.k()}),e.i&&e.mb&&g.a.F.rc(e.i,e.mb),e.r=null,e.L=0,e.S=!0,e.T=!1,e.s=!1,e.i=null}},k={sa:function(e){var t=this,n=t[T];if(!n.S&&n.s&&"change"==e){if(n.s=!1,n.T||t.Qa())n.r=null,n.L=0,n.T=!0,t.aa()&&t.Ib();else{var r=[];g.a.D(n.r,function(e,t){r[t.Ga]=e}),g.a.q(r,function(e,r){var i=n.r[e],o=t.wc(i.ia);o.Ga=r,o.na=i.na,n.r[e]=o})}n.S||t.notifySubscribers(n.U,"awake")}},Ia:function(t){var n=this[T];n.S||"change"!=t||this.Pa("change")||(g.a.D(n.r,function(e,t){t.k&&(n.r[e]={ia:t.ia,Ga:t.Ga,na:t.na},t.k())}),n.s=!0,this.notifySubscribers(e,"asleep"))},Na:function(){var e=this[T];return e.s&&(e.T||this.Qa())&&this.aa(),g.J.fn.Na.call(this)}},E={sa:function(e){"change"!=e&&"beforeChange"!=e||this.t()}};g.a.ka&&g.a.Xa(C,g.J.fn);var N=g.N.hd;g.m[N]=g.N,C[N]=g.m,g.Yc=function(e){return g.Oa(e,g.m)},g.Zc=function(e){return g.Oa(e,g.m)&&e[T]&&e[T].Va},g.b("computed",g.m),g.b("dependentObservable",g.m),g.b("isComputed",g.Yc),g.b("isPureComputed",g.Zc),g.b("computed.fn",C),g.G(C,"peek",C.t),g.G(C,"dispose",C.k),g.G(C,"isActive",C.ba),g.G(C,"getDependenciesCount",C.Aa),g.pc=function(e,t){return"function"==typeof e?g.m(e,t,{pure:!0}):(e=g.a.extend({},e),e.pure=!0,g.m(e,t))},g.b("pureComputed",g.pc),function(){function t(i,o,a){if(a=a||new r,i=o(i),"object"!=typeof i||null===i||i===e||i instanceof RegExp||i instanceof Date||i instanceof String||i instanceof Number||i instanceof Boolean)return i;var s=i instanceof Array?[]:{};return a.save(i,s),n(i,function(n){var r=o(i[n]);switch(typeof r){case"boolean":case"number":case"string":case"function":s[n]=r;break;case"object":case"undefined":var u=a.get(r);s[n]=u!==e?u:t(r,o,a)}}),s}function n(e,t){if(e instanceof Array){for(var n=0;n<e.length;n++)t(n);"function"==typeof e.toJSON&&t("toJSON")}else for(n in e)t(n)}function r(){this.keys=[],this.Jb=[]}g.yc=function(e){if(0==arguments.length)throw Error("When calling ko.toJS, pass the object you want to convert.");return t(e,function(e){for(var t=0;g.H(e)&&10>t;t++)e=e();return e})},g.toJSON=function(e,t,n){return e=g.yc(e),g.a.Eb(e,t,n)},r.prototype={save:function(e,t){var n=g.a.o(this.keys,e);0<=n?this.Jb[n]=t:(this.keys.push(e),this.Jb.push(t))},get:function(t){return t=g.a.o(this.keys,t),0<=t?this.Jb[t]:e}}}(),g.b("toJS",g.yc),g.b("toJSON",g.toJSON),function(){g.j={u:function(t){switch(g.a.A(t)){case"option":return!0===t.__ko__hasDomDataOptionValue__?g.a.e.get(t,g.d.options.xb):7>=g.a.C?t.getAttributeNode("value")&&t.getAttributeNode("value").specified?t.value:t.text:t.value;case"select":return 0<=t.selectedIndex?g.j.u(t.options[t.selectedIndex]):e;default:return t.value}},ha:function(t,n,r){switch(g.a.A(t)){case"option":switch(typeof n){case"string":g.a.e.set(t,g.d.options.xb,e),"__ko__hasDomDataOptionValue__"in t&&delete t.__ko__hasDomDataOptionValue__,t.value=n;break;default:g.a.e.set(t,g.d.options.xb,n),t.__ko__hasDomDataOptionValue__=!0,t.value="number"==typeof n?n:""}break;case"select":""!==n&&null!==n||(n=e);for(var i,o=-1,a=0,s=t.options.length;a<s;++a)if(i=g.j.u(t.options[a]),i==n||""==i&&n===e){o=a;break}(r||0<=o||n===e&&1<t.size)&&(t.selectedIndex=o);break;default:null!==n&&n!==e||(n=""),t.value=n}}}}(),g.b("selectExtensions",g.j),g.b("selectExtensions.readValue",g.j.u),g.b("selectExtensions.writeValue",g.j.ha),g.h=function(){function e(e){e=g.a.$a(e),123===e.charCodeAt(0)&&(e=e.slice(1,-1));var t,n=[],a=e.match(r),s=[],u=0;if(a){a.push(",");for(var c,l=0;c=a[l];++l){var f=c.charCodeAt(0);if(44===f){if(0>=u){n.push(t&&s.length?{key:t,value:s.join("")}:{unknown:t||s.join("")}),t=u=0,s=[];continue}}else if(58===f){if(!u&&!t&&1===s.length){t=s.pop();continue}}else 47===f&&l&&1<c.length?(f=a[l-1].match(i))&&!o[f[0]]&&(e=e.substr(e.indexOf(c)+1),a=e.match(r),a.push(","),l=-1,c="/"):40===f||123===f||91===f?++u:41===f||125===f||93===f?--u:t||s.length||34!==f&&39!==f||(c=c.slice(1,-1));s.push(c)}}return n}var t=["true","false","null","undefined"],n=/^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i,r=RegExp("\"(?:[^\"\\\\]|\\\\.)*\"|'(?:[^'\\\\]|\\\\.)*'|/(?:[^/\\\\]|\\\\.)*/w*|[^\\s:,/][^,\"'{}()/:[\\]]*[^\\s,\"'{}()/:[\\]]|[^\\s]","g"),i=/[\])"'A-Za-z0-9_$]+$/,o={in:1,return:1,typeof:1},a={};return{ta:[],ea:a,yb:e,Ua:function(r,i){function o(e,r){var i;if(!l){var f=g.getBindingHandler(e);if(f&&f.preprocess&&!(r=f.preprocess(r,e,o)))return;(f=a[e])&&(i=r,0<=g.a.o(t,i)?i=!1:(f=i.match(n),i=null!==f&&(f[1]?"Object("+f[1]+")"+f[2]:i)),f=i),f&&u.push("'"+e+"':function(_z){"+i+"=_z}")}c&&(r="function(){return "+r+" }"),s.push("'"+e+"':"+r)}i=i||{};var s=[],u=[],c=i.valueAccessors,l=i.bindingParams,f="string"==typeof r?e(r):r;return g.a.q(f,function(e){o(e.key||e.unknown,e.value)}),u.length&&o("_ko_property_writers","{"+u.join(",")+" }"),s.join(",")},bd:function(e,t){for(var n=0;n<e.length;n++)if(e[n].key==t)return!0;return!1},Ea:function(e,t,n,r,i){e&&g.H(e)?!g.Ba(e)||i&&e.t()===r||e(r):(e=t.get("_ko_property_writers"))&&e[n]&&e[n](r)}}}(),g.b("expressionRewriting",g.h),g.b("expressionRewriting.bindingRewriteValidators",g.h.ta),g.b("expressionRewriting.parseObjectLiteral",g.h.yb),g.b("expressionRewriting.preProcessBindings",g.h.Ua),g.b("expressionRewriting._twoWayBindings",g.h.ea),g.b("jsonExpressionRewriting",g.h),g.b("jsonExpressionRewriting.insertPropertyAccessorsIntoJson",g.h.Ua),function(){function e(e){return 8==e.nodeType&&a.test(o?e.text:e.nodeValue)}function t(e){return 8==e.nodeType&&s.test(o?e.text:e.nodeValue)}function r(n,r){for(var i=n,o=1,a=[];i=i.nextSibling;){if(t(i)&&(o--,0===o))return a;a.push(i),e(i)&&o++}if(!r)throw Error("Cannot find closing comment tag to match: "+n.nodeValue);return null}function i(e,t){var n=r(e,t);return n?0<n.length?n[n.length-1].nextSibling:e.nextSibling:null}var o=n&&"<!--test-->"===n.createComment("test").text,a=o?/^\x3c!--\s*ko(?:\s+([\s\S]+))?\s*--\x3e$/:/^\s*ko(?:\s+([\s\S]+))?\s*$/,s=o?/^\x3c!--\s*\/ko\s*--\x3e$/:/^\s*\/ko\s*$/,u={ul:!0,ol:!0};g.f={Z:{},childNodes:function(t){return e(t)?r(t):t.childNodes;
},xa:function(t){if(e(t)){t=g.f.childNodes(t);for(var n=0,r=t.length;n<r;n++)g.removeNode(t[n])}else g.a.ob(t)},da:function(t,n){if(e(t)){g.f.xa(t);for(var r=t.nextSibling,i=0,o=n.length;i<o;i++)r.parentNode.insertBefore(n[i],r)}else g.a.da(t,n)},oc:function(t,n){e(t)?t.parentNode.insertBefore(n,t.nextSibling):t.firstChild?t.insertBefore(n,t.firstChild):t.appendChild(n)},ic:function(t,n,r){r?e(t)?t.parentNode.insertBefore(n,r.nextSibling):r.nextSibling?t.insertBefore(n,r.nextSibling):t.appendChild(n):g.f.oc(t,n)},firstChild:function(n){return e(n)?!n.nextSibling||t(n.nextSibling)?null:n.nextSibling:n.firstChild},nextSibling:function(n){return e(n)&&(n=i(n)),n.nextSibling&&t(n.nextSibling)?null:n.nextSibling},Uc:e,qd:function(e){return(e=(o?e.text:e.nodeValue).match(a))?e[1]:null},mc:function(n){if(u[g.a.A(n)]){var r=n.firstChild;if(r)do if(1===r.nodeType){var o;o=r.firstChild;var a=null;if(o)do if(a)a.push(o);else if(e(o)){var s=i(o,!0);s?o=s:a=[o]}else t(o)&&(a=[o]);while(o=o.nextSibling);if(o=a)for(a=r.nextSibling,s=0;s<o.length;s++)a?n.insertBefore(o[s],a):n.appendChild(o[s])}while(r=r.nextSibling)}}}}(),g.b("virtualElements",g.f),g.b("virtualElements.allowedBindings",g.f.Z),g.b("virtualElements.emptyNode",g.f.xa),g.b("virtualElements.insertAfter",g.f.ic),g.b("virtualElements.prepend",g.f.oc),g.b("virtualElements.setDomNodeChildren",g.f.da),function(){g.R=function(){this.Gc={}},g.a.extend(g.R.prototype,{nodeHasBindings:function(e){switch(e.nodeType){case 1:return null!=e.getAttribute("data-bind")||g.g.getComponentNameForNode(e);case 8:return g.f.Uc(e);default:return!1}},getBindings:function(e,t){var n=this.getBindingsString(e,t),n=n?this.parseBindingsString(n,t,e):null;return g.g.Pb(n,e,t,!1)},getBindingAccessors:function(e,t){var n=this.getBindingsString(e,t),n=n?this.parseBindingsString(n,t,e,{valueAccessors:!0}):null;return g.g.Pb(n,e,t,!0)},getBindingsString:function(e){switch(e.nodeType){case 1:return e.getAttribute("data-bind");case 8:return g.f.qd(e);default:return null}},parseBindingsString:function(e,t,n,r){try{var i,o=this.Gc,a=e+(r&&r.valueAccessors||"");if(!(i=o[a])){var s,u="with($context){with($data||{}){return{"+g.h.Ua(e,r)+"}}}";s=new Function("$context","$element",u),i=o[a]=s}return i(t,n)}catch(t){throw t.message="Unable to parse bindings.\nBindings value: "+e+"\nMessage: "+t.message,t}}}),g.R.instance=new g.R}(),g.b("bindingProvider",g.R),function(){function n(e){return function(){return e}}function r(e){return e()}function o(e){return g.a.Ca(g.l.w(e),function(t,n){return function(){return e()[n]}})}function a(e,t,r){return"function"==typeof e?o(e.bind(null,t,r)):g.a.Ca(e,n)}function s(e,t){return o(this.getBindings.bind(this,e,t))}function u(e,t,n){var r,i=g.f.firstChild(t),o=g.R.instance,a=o.preprocessNode;if(a){for(;r=i;)i=g.f.nextSibling(r),a.call(o,r);i=g.f.firstChild(t)}for(;r=i;)i=g.f.nextSibling(r),c(e,r,n)}function c(e,t,n){var r=!0,i=1===t.nodeType;i&&g.f.mc(t),(i&&n||g.R.instance.nodeHasBindings(t))&&(r=f(t,null,e,n).shouldBindDescendants),r&&!d[g.a.A(t)]&&u(e,t,!i)}function l(e){var t=[],n={},r=[];return g.a.D(e,function i(o){if(!n[o]){var a=g.getBindingHandler(o);a&&(a.after&&(r.push(o),g.a.q(a.after,function(t){if(e[t]){if(-1!==g.a.o(r,t))throw Error("Cannot combine the following bindings, because they have a cyclic dependency: "+r.join(", "));i(t)}}),r.length--),t.push({key:o,hc:a})),n[o]=!0}}),t}function f(t,n,i,o){var a=g.a.e.get(t,h);if(!n){if(a)throw Error("You cannot apply bindings multiple times to the same element.");g.a.e.set(t,h,!0)}!a&&o&&g.vc(t,i);var u;if(n&&"function"!=typeof n)u=n;else{var c=g.R.instance,f=c.getBindingAccessors||s,p=g.B(function(){return(u=n?n(i,t):f.call(c,t,i))&&i.P&&i.P(),u},null,{i:t});u&&p.ba()||(p=null)}var d;if(u){var m=p?function(e){return function(){return r(p()[e])}}:function(e){return u[e]},v=function(){return g.a.Ca(p?p():u,r)};v.get=function(e){return u[e]&&r(m(e))},v.has=function(e){return e in u},o=l(u),g.a.q(o,function(n){var r=n.hc.init,o=n.hc.update,a=n.key;if(8===t.nodeType&&!g.f.Z[a])throw Error("The binding '"+a+"' cannot be used with virtual elements");try{"function"==typeof r&&g.l.w(function(){var n=r(t,m(a),v,i.$data,i);if(n&&n.controlsDescendantBindings){if(d!==e)throw Error("Multiple bindings ("+d+" and "+a+") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");d=a}}),"function"==typeof o&&g.B(function(){o(t,m(a),v,i.$data,i)},null,{i:t})}catch(e){throw e.message='Unable to process binding "'+a+": "+u[a]+'"\nMessage: '+e.message,e}})}return{shouldBindDescendants:d===e}}function p(e){return e&&e instanceof g.Q?e:new g.Q(e)}g.d={};var d={script:!0,textarea:!0,template:!0};g.getBindingHandler=function(e){return g.d[e]},g.Q=function(t,n,r,i,o){function a(){var e=f?t():t,o=g.a.c(e);return n?(n.P&&n.P(),g.a.extend(l,n),l.P=c):(l.$parents=[],l.$root=o,l.ko=g),l.$rawData=e,l.$data=o,r&&(l[r]=o),i&&i(l,n,o),l.$data}function s(){return u&&!g.a.Rb(u)}var u,c,l=this,f="function"==typeof t&&!g.H(t);o&&o.exportDependencies?a():(c=g.B(a,null,{wa:s,i:!0}),c.ba()&&(l.P=c,c.equalityComparer=null,u=[],c.Bc=function(t){u.push(t),g.a.F.oa(t,function(t){g.a.La(u,t),u.length||(c.k(),l.P=c=e)})}))},g.Q.prototype.createChildContext=function(e,t,n,r){return new g.Q(e,this,t,function(e,t){e.$parentContext=t,e.$parent=t.$data,e.$parents=(t.$parents||[]).slice(0),e.$parents.unshift(e.$parent),n&&n(e)},r)},g.Q.prototype.extend=function(e){return new g.Q(this.P||this.$data,this,null,function(t,n){t.$rawData=n.$rawData,g.a.extend(t,"function"==typeof e?e():e)})},g.Q.prototype.Zb=function(e,t){return this.createChildContext(e,t,null,{exportDependencies:!0})};var h=g.a.e.I(),m=g.a.e.I();g.vc=function(e,t){return 2!=arguments.length?g.a.e.get(e,m):(g.a.e.set(e,m,t),void(t.P&&t.P.Bc(e)))},g.Ja=function(e,t,n){return 1===e.nodeType&&g.f.mc(e),f(e,t,p(n),!0)},g.Ec=function(e,t,n){return n=p(n),g.Ja(e,a(t,n,e),n)},g.eb=function(e,t){1!==t.nodeType&&8!==t.nodeType||u(p(e),t,!0)},g.Sb=function(e,n){if(!i&&t.jQuery&&(i=t.jQuery),n&&1!==n.nodeType&&8!==n.nodeType)throw Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");n=n||t.document.body,c(p(e),n,!0)},g.kb=function(t){switch(t.nodeType){case 1:case 8:var n=g.vc(t);if(n)return n;if(t.parentNode)return g.kb(t.parentNode)}return e},g.Kc=function(t){return(t=g.kb(t))?t.$data:e},g.b("bindingHandlers",g.d),g.b("applyBindings",g.Sb),g.b("applyBindingsToDescendants",g.eb),g.b("applyBindingAccessorsToNode",g.Ja),g.b("applyBindingsToNode",g.Ec),g.b("contextFor",g.kb),g.b("dataFor",g.Kc)}(),function(e){function t(t,r){var a,s=i.hasOwnProperty(t)?i[t]:e;s?s.X(r):(s=i[t]=new g.J,s.X(r),n(t,function(e,n){var r=!(!n||!n.synchronous);o[t]={definition:e,$c:r},delete i[t],a||r?s.notifySubscribers(e):g.Y.Wa(function(){s.notifySubscribers(e)})}),a=!0)}function n(e,t){r("getConfig",[e],function(n){n?r("loadComponent",[e,n],function(e){t(e,n)}):t(null,null)})}function r(t,n,i,o){o||(o=g.g.loaders.slice(0));var a=o.shift();if(a){var s=a[t];if(s){var u=!1;if(s.apply(a,n.concat(function(e){u?i(null):null!==e?i(e):r(t,n,i,o)}))!==e&&(u=!0,!a.suppressLoaderExceptions))throw Error("Component loaders must supply values by invoking the callback, not by returning values synchronously.")}else r(t,n,i,o)}else i(null)}var i={},o={};g.g={get:function(n,r){var i=o.hasOwnProperty(n)?o[n]:e;i?i.$c?g.l.w(function(){r(i.definition)}):g.Y.Wa(function(){r(i.definition)}):t(n,r)},Yb:function(e){delete o[e]},Kb:r},g.g.loaders=[],g.b("components",g.g),g.b("components.get",g.g.get),g.b("components.clearCachedDefinition",g.g.Yb)}(),function(){function e(e,t,n,r){function i(){0===--s&&r(o)}var o={},s=2,u=n.template;n=n.viewModel,u?a(t,u,function(t){g.g.Kb("loadTemplate",[e,t],function(e){o.template=e,i()})}):i(),n?a(t,n,function(t){g.g.Kb("loadViewModel",[e,t],function(e){o[l]=e,i()})}):i()}function r(e,t,n){if("function"==typeof t)n(function(e){return new t(e)});else if("function"==typeof t[l])n(t[l]);else if("instance"in t){var i=t.instance;n(function(){return i})}else"viewModel"in t?r(e,t.viewModel,n):e("Unknown viewModel value: "+t)}function i(e){switch(g.a.A(e)){case"script":return g.a.ma(e.text);case"textarea":return g.a.ma(e.value);case"template":if(o(e.content))return g.a.ua(e.content.childNodes)}return g.a.ua(e.childNodes)}function o(e){return t.DocumentFragment?e instanceof DocumentFragment:e&&11===e.nodeType}function a(e,n,r){"string"==typeof n.require?s||t.require?(s||t.require)([n.require],r):e("Uses require, but no AMD loader is present"):r(n)}function u(e){return function(t){throw Error("Component '"+e+"': "+t)}}var c={};g.g.register=function(e,t){if(!t)throw Error("Invalid configuration for "+e);if(g.g.ub(e))throw Error("Component "+e+" is already registered");c[e]=t},g.g.ub=function(e){return c.hasOwnProperty(e)},g.g.pd=function(e){delete c[e],g.g.Yb(e)},g.g.ac={getConfig:function(e,t){t(c.hasOwnProperty(e)?c[e]:null)},loadComponent:function(t,n,r){var i=u(t);a(i,n,function(n){e(t,i,n,r)})},loadTemplate:function(e,r,a){if(e=u(e),"string"==typeof r)a(g.a.ma(r));else if(r instanceof Array)a(r);else if(o(r))a(g.a.V(r.childNodes));else if(r.element)if(r=r.element,t.HTMLElement?r instanceof HTMLElement:r&&r.tagName&&1===r.nodeType)a(i(r));else if("string"==typeof r){var s=n.getElementById(r);s?a(i(s)):e("Cannot find element with ID "+r)}else e("Unknown element type: "+r);else e("Unknown template value: "+r)},loadViewModel:function(e,t,n){r(u(e),t,n)}};var l="createViewModel";g.b("components.register",g.g.register),g.b("components.isRegistered",g.g.ub),g.b("components.unregister",g.g.pd),g.b("components.defaultLoader",g.g.ac),g.g.loaders.push(g.g.ac),g.g.Cc=c}(),function(){function e(e,n){var r=e.getAttribute("params");if(r){var r=t.parseBindingsString(r,n,e,{valueAccessors:!0,bindingParams:!0}),r=g.a.Ca(r,function(t){return g.m(t,null,{i:e})}),i=g.a.Ca(r,function(t){var n=t.t();return t.ba()?g.m({read:function(){return g.a.c(t())},write:g.Ba(n)&&function(e){t()(e)},i:e}):n});return i.hasOwnProperty("$raw")||(i.$raw=r),i}return{$raw:{}}}g.g.getComponentNameForNode=function(e){var t=g.a.A(e);if(g.g.ub(t)&&(-1!=t.indexOf("-")||"[object HTMLUnknownElement]"==""+e||8>=g.a.C&&e.tagName===t))return t},g.g.Pb=function(t,n,r,i){if(1===n.nodeType){var o=g.g.getComponentNameForNode(n);if(o){if(t=t||{},t.component)throw Error('Cannot use the "component" binding on a custom element matching a component');var a={name:o,params:e(n,r)};t.component=i?function(){return a}:a}}return t};var t=new g.R;9>g.a.C&&(g.g.register=function(e){return function(t){return n.createElement(t),e.apply(this,arguments)}}(g.g.register),n.createDocumentFragment=function(e){return function(){var t,n=e(),r=g.g.Cc;for(t in r)r.hasOwnProperty(t)&&n.createElement(t);return n}}(n.createDocumentFragment))}(),function(e){function t(e,t,n){if(t=t.template,!t)throw Error("Component '"+e+"' has no template");e=g.a.ua(t),g.f.da(n,e)}function n(e,t,n,r){var i=e.createViewModel;return i?i.call(e,r,{element:t,templateNodes:n}):r}var r=0;g.d.component={init:function(i,o,a,s,u){function c(){var e=l&&l.dispose;"function"==typeof e&&e.call(l),f=l=null}var l,f,p=g.a.V(g.f.childNodes(i));return g.a.F.oa(i,c),g.m(function(){var a,s,d=g.a.c(o());if("string"==typeof d?a=d:(a=g.a.c(d.name),s=g.a.c(d.params)),!a)throw Error("No component name specified");var h=f=++r;g.g.get(a,function(r){if(f===h){if(c(),!r)throw Error("Unknown component '"+a+"'");t(a,r,i);var o=n(r,i,p,s);r=u.createChildContext(o,e,function(e){e.$component=o,e.$componentTemplateNodes=p}),l=o,g.eb(r,i)}})},null,{i:i}),{controlsDescendantBindings:!0}}},g.f.Z.component=!0}();var S={class:"className",for:"htmlFor"};g.d.attr={update:function(t,n){var r=g.a.c(n())||{};g.a.D(r,function(n,r){r=g.a.c(r);var i=!1===r||null===r||r===e;i&&t.removeAttribute(n),8>=g.a.C&&n in S?(n=S[n],i?t.removeAttribute(n):t[n]=r):i||t.setAttribute(n,r.toString()),"name"===n&&g.a.tc(t,i?"":r.toString())})}},function(){g.d.checked={after:["value","attr"],init:function(t,n,r){function i(){var e=t.checked,i=d?a():e;if(!g.va.Sa()&&(!u||e)){var o=g.l.w(n);if(l){var s=f?o.t():o;p!==i?(e&&(g.a.pa(s,i,!0),g.a.pa(s,p,!1)),p=i):g.a.pa(s,i,e),f&&g.Ba(o)&&o(s)}else g.h.Ea(o,r,"checked",i,!0)}}function o(){var e=g.a.c(n());t.checked=l?0<=g.a.o(e,a()):s?e:a()===e}var a=g.pc(function(){return r.has("checkedValue")?g.a.c(r.get("checkedValue")):r.has("value")?g.a.c(r.get("value")):t.value}),s="checkbox"==t.type,u="radio"==t.type;if(s||u){var c=n(),l=s&&g.a.c(c)instanceof Array,f=!(l&&c.push&&c.splice),p=l?a():e,d=u||l;u&&!t.name&&g.d.uniqueName.init(t,function(){return!0}),g.m(i,null,{i:t}),g.a.p(t,"click",i),g.m(o,null,{i:t}),c=e}}},g.h.ea.checked=!0,g.d.checkedValue={update:function(e,t){e.value=g.a.c(t())}}}(),g.d.css={update:function(e,t){var n=g.a.c(t());null!==n&&"object"==typeof n?g.a.D(n,function(t,n){n=g.a.c(n),g.a.bb(e,t,n)}):(n=g.a.$a(String(n||"")),g.a.bb(e,e.__ko__cssValue,!1),e.__ko__cssValue=n,g.a.bb(e,n,!0))}},g.d.enable={update:function(e,t){var n=g.a.c(t());n&&e.disabled?e.removeAttribute("disabled"):n||e.disabled||(e.disabled=!0)}},g.d.disable={update:function(e,t){g.d.enable.update(e,function(){return!g.a.c(t())})}},g.d.event={init:function(e,t,n,r,i){var o=t()||{};g.a.D(o,function(o){"string"==typeof o&&g.a.p(e,o,function(e){var a,s=t()[o];if(s){try{var u=g.a.V(arguments);r=i.$data,u.unshift(r),a=s.apply(r,u)}finally{!0!==a&&(e.preventDefault?e.preventDefault():e.returnValue=!1)}!1===n.get(o+"Bubble")&&(e.cancelBubble=!0,e.stopPropagation&&e.stopPropagation())}})})}},g.d.foreach={kc:function(e){return function(){var t=e(),n=g.a.zb(t);return n&&"number"!=typeof n.length?(g.a.c(t),{foreach:n.data,as:n.as,includeDestroyed:n.includeDestroyed,afterAdd:n.afterAdd,beforeRemove:n.beforeRemove,afterRender:n.afterRender,beforeMove:n.beforeMove,afterMove:n.afterMove,templateEngine:g.W.sb}):{foreach:t,templateEngine:g.W.sb}}},init:function(e,t){return g.d.template.init(e,g.d.foreach.kc(t))},update:function(e,t,n,r,i){return g.d.template.update(e,g.d.foreach.kc(t),n,r,i)}},g.h.ta.foreach=!1,g.f.Z.foreach=!0,g.d.hasfocus={init:function(e,t,n){function r(r){e.__ko_hasfocusUpdating=!0;var i=e.ownerDocument;if("activeElement"in i){var o;try{o=i.activeElement}catch(e){o=i.body}r=o===e}i=t(),g.h.Ea(i,n,"hasfocus",r,!0),e.__ko_hasfocusLastValue=r,e.__ko_hasfocusUpdating=!1}var i=r.bind(null,!0),o=r.bind(null,!1);g.a.p(e,"focus",i),g.a.p(e,"focusin",i),g.a.p(e,"blur",o),g.a.p(e,"focusout",o)},update:function(e,t){var n=!!g.a.c(t());e.__ko_hasfocusUpdating||e.__ko_hasfocusLastValue===n||(n?e.focus():e.blur(),!n&&e.__ko_hasfocusLastValue&&e.ownerDocument.body.focus(),g.l.w(g.a.Da,null,[e,n?"focusin":"focusout"]))}},g.h.ea.hasfocus=!0,g.d.hasFocus=g.d.hasfocus,g.h.ea.hasFocus=!0,g.d.html={init:function(){return{controlsDescendantBindings:!0}},update:function(e,t){g.a.Cb(e,t())}},h("if"),h("ifnot",!1,!0),h("with",!0,!1,function(e,t){return e.Zb(t)});var D={};g.d.options={init:function(e){if("select"!==g.a.A(e))throw Error("options binding applies only to SELECT elements");for(;0<e.length;)e.remove(0);return{controlsDescendantBindings:!0}},update:function(t,n,r){function i(){return g.a.Ka(t.options,function(e){return e.selected})}function o(e,t,n){var r=typeof t;return"function"==r?t(e):"string"==r?e[t]:n}function a(e,n){if(h&&l)g.j.ha(t,g.a.c(r.get("value")),!0);else if(d.length){var i=0<=g.a.o(d,g.j.u(n[0]));g.a.uc(n[0],i),h&&!i&&g.l.w(g.a.Da,null,[t,"change"])}}var s=t.multiple,u=0!=t.length&&s?t.scrollTop:null,c=g.a.c(n()),l=r.get("valueAllowUnset")&&r.has("value"),f=r.get("optionsIncludeDestroyed");n={};var p,d=[];l||(s?d=g.a.fb(i(),g.j.u):0<=t.selectedIndex&&d.push(g.j.u(t.options[t.selectedIndex]))),c&&("undefined"==typeof c.length&&(c=[c]),p=g.a.Ka(c,function(t){return f||t===e||null===t||!g.a.c(t._destroy)}),r.has("optionsCaption")&&(c=g.a.c(r.get("optionsCaption")),null!==c&&c!==e&&p.unshift(D)));var h=!1;n.beforeRemove=function(e){t.removeChild(e)},c=a,r.has("optionsAfterRender")&&"function"==typeof r.get("optionsAfterRender")&&(c=function(t,n){a(0,n),g.l.w(r.get("optionsAfterRender"),null,[n[0],t!==D?t:e])}),g.a.Bb(t,p,function(n,i,a){return a.length&&(d=!l&&a[0].selected?[g.j.u(a[0])]:[],h=!0),i=t.ownerDocument.createElement("option"),n===D?(g.a.Za(i,r.get("optionsCaption")),g.j.ha(i,e)):(a=o(n,r.get("optionsValue"),n),g.j.ha(i,g.a.c(a)),n=o(n,r.get("optionsText"),a),g.a.Za(i,n)),[i]},n,c),g.l.w(function(){l?g.j.ha(t,g.a.c(r.get("value")),!0):(s?d.length&&i().length<d.length:d.length&&0<=t.selectedIndex?g.j.u(t.options[t.selectedIndex])!==d[0]:d.length||0<=t.selectedIndex)&&g.a.Da(t,"change")}),g.a.Oc(t),u&&20<Math.abs(u-t.scrollTop)&&(t.scrollTop=u)}},g.d.options.xb=g.a.e.I(),g.d.selectedOptions={after:["options","foreach"],init:function(e,t,n){g.a.p(e,"change",function(){var r=t(),i=[];g.a.q(e.getElementsByTagName("option"),function(e){e.selected&&i.push(g.j.u(e))}),g.h.Ea(r,n,"selectedOptions",i)})},update:function(e,t){if("select"!=g.a.A(e))throw Error("values binding applies only to SELECT elements");var n=g.a.c(t()),r=e.scrollTop;n&&"number"==typeof n.length&&g.a.q(e.getElementsByTagName("option"),function(e){var t=0<=g.a.o(n,g.j.u(e));e.selected!=t&&g.a.uc(e,t)}),e.scrollTop=r}},g.h.ea.selectedOptions=!0,g.d.style={update:function(t,n){var r=g.a.c(n()||{});g.a.D(r,function(n,r){r=g.a.c(r),null!==r&&r!==e&&!1!==r||(r=""),t.style[n]=r})}},g.d.submit={init:function(e,t,n,r,i){if("function"!=typeof t())throw Error("The value for a submit binding must be a function");g.a.p(e,"submit",function(n){var r,o=t();try{r=o.call(i.$data,e)}finally{!0!==r&&(n.preventDefault?n.preventDefault():n.returnValue=!1)}})}},g.d.text={init:function(){return{controlsDescendantBindings:!0}},update:function(e,t){g.a.Za(e,t())}},g.f.Z.text=!0,function(){if(t&&t.navigator)var n=function(e){if(e)return parseFloat(e[1])},r=t.opera&&t.opera.version&&parseInt(t.opera.version()),i=t.navigator.userAgent,o=n(i.match(/^(?:(?!chrome).)*version\/([^ ]*) safari/i)),a=n(i.match(/Firefox\/([^ ]*)/));if(10>g.a.C)var s=g.a.e.I(),u=g.a.e.I(),c=function(e){var t=this.activeElement;(t=t&&g.a.e.get(t,u))&&t(e)},l=function(e,t){var n=e.ownerDocument;g.a.e.get(n,s)||(g.a.e.set(n,s,!0),g.a.p(n,"selectionchange",c)),g.a.e.set(e,u,t)};g.d.textInput={init:function(t,n,i){function s(e,n){g.a.p(t,e,n)}function u(){var r=g.a.c(n());null!==r&&r!==e||(r=""),d!==e&&r===d?g.a.setTimeout(u,4):t.value!==r&&(h=r,t.value=r)}function c(){p||(d=t.value,p=g.a.setTimeout(f,4))}function f(){clearTimeout(p),d=p=e;var r=t.value;h!==r&&(h=r,g.h.Ea(n(),i,"textInput",r))}var p,d,h=t.value,m=9==g.a.C?c:f;10>g.a.C?(s("propertychange",function(e){"value"===e.propertyName&&m(e)}),8==g.a.C&&(s("keyup",f),s("keydown",f)),8<=g.a.C&&(l(t,m),s("dragend",c))):(s("input",f),5>o&&"textarea"===g.a.A(t)?(s("keydown",c),s("paste",c),s("cut",c)):11>r?s("keydown",c):4>a&&(s("DOMAutoComplete",f),s("dragdrop",f),s("drop",f))),s("change",f),g.m(u,null,{i:t})}},g.h.ea.textInput=!0,g.d.textinput={preprocess:function(e,t,n){n("textInput",e)}}}(),g.d.uniqueName={init:function(e,t){if(t()){var n="ko_unique_"+ ++g.d.uniqueName.Jc;g.a.tc(e,n)}}},g.d.uniqueName.Jc=0,g.d.value={after:["options","foreach"],init:function(e,t,n){if("input"!=e.tagName.toLowerCase()||"checkbox"!=e.type&&"radio"!=e.type){var r=["change"],i=n.get("valueUpdate"),o=!1,a=null;i&&("string"==typeof i&&(i=[i]),g.a.ra(r,i),r=g.a.Ub(r));var s=function(){a=null,o=!1;var r=t(),i=g.j.u(e);g.h.Ea(r,n,"value",i)};!g.a.C||"input"!=e.tagName.toLowerCase()||"text"!=e.type||"off"==e.autocomplete||e.form&&"off"==e.form.autocomplete||-1!=g.a.o(r,"propertychange")||(g.a.p(e,"propertychange",function(){o=!0}),g.a.p(e,"focus",function(){o=!1}),g.a.p(e,"blur",function(){o&&s()})),g.a.q(r,function(t){var n=s;g.a.od(t,"after")&&(n=function(){a=g.j.u(e),g.a.setTimeout(s,0)},t=t.substring(5)),g.a.p(e,t,n)});var u=function(){var r=g.a.c(t()),i=g.j.u(e);if(null!==a&&r===a)g.a.setTimeout(u,0);else if(r!==i)if("select"===g.a.A(e)){var o=n.get("valueAllowUnset"),i=function(){g.j.ha(e,r,o)};i(),o||r===g.j.u(e)?g.a.setTimeout(i,0):g.l.w(g.a.Da,null,[e,"change"])}else g.j.ha(e,r)};g.m(u,null,{i:e})}else g.Ja(e,{checkedValue:t})},update:function(){}},g.h.ea.value=!0,g.d.visible={update:function(e,t){var n=g.a.c(t()),r="none"!=e.style.display;n&&!r?e.style.display="":!n&&r&&(e.style.display="none")}},function(e){g.d[e]={init:function(t,n,r,i,o){return g.d.event.init.call(this,t,function(){var t={};return t[e]=n(),t},r,i,o)}}}("click"),g.O=function(){},g.O.prototype.renderTemplateSource=function(){throw Error("Override renderTemplateSource")},g.O.prototype.createJavaScriptEvaluatorBlock=function(){throw Error("Override createJavaScriptEvaluatorBlock")},g.O.prototype.makeTemplateSource=function(e,t){if("string"==typeof e){t=t||n;var r=t.getElementById(e);if(!r)throw Error("Cannot find template with ID "+e);return new g.v.n(r)}if(1==e.nodeType||8==e.nodeType)return new g.v.qa(e);throw Error("Unknown template type: "+e)},g.O.prototype.renderTemplate=function(e,t,n,r){return e=this.makeTemplateSource(e,r),this.renderTemplateSource(e,t,n,r)},g.O.prototype.isTemplateRewritten=function(e,t){return!1===this.allowTemplateRewriting||this.makeTemplateSource(e,t).data("isRewritten")},g.O.prototype.rewriteTemplate=function(e,t,n){e=this.makeTemplateSource(e,n),t=t(e.text()),e.text(t),e.data("isRewritten",!0)},g.b("templateEngine",g.O),g.Gb=function(){function e(e,t,n,r){e=g.h.yb(e);for(var i=g.h.ta,o=0;o<e.length;o++){var a=e[o].key;if(i.hasOwnProperty(a)){var s=i[a];if("function"==typeof s){if(a=s(e[o].value))throw Error(a)}else if(!s)throw Error("This template engine does not support the '"+a+"' binding within its templates")}}return n="ko.__tr_ambtns(function($context,$element){return(function(){return{ "+g.h.Ua(e,{valueAccessors:!0})+" } })()},'"+n.toLowerCase()+"')",r.createJavaScriptEvaluatorBlock(n)+t}var t=/(<([a-z]+\d*)(?:\s+(?!data-bind\s*=\s*)[a-z0-9\-]+(?:=(?:\"[^\"]*\"|\'[^\']*\'|[^>]*))?)*\s+)data-bind\s*=\s*(["'])([\s\S]*?)\3/gi,n=/\x3c!--\s*ko\b\s*([\s\S]*?)\s*--\x3e/g;return{Pc:function(e,t,n){t.isTemplateRewritten(e,n)||t.rewriteTemplate(e,function(e){return g.Gb.ed(e,t)},n)},ed:function(r,i){return r.replace(t,function(t,n,r,o,a){return e(a,n,r,i)}).replace(n,function(t,n){return e(n,"<!-- ko -->","#comment",i)})},Fc:function(e,t){return g.M.wb(function(n,r){var i=n.nextSibling;i&&i.nodeName.toLowerCase()===t&&g.Ja(i,e,r)})}}}(),g.b("__tr_ambtns",g.Gb.Fc),function(){g.v={},g.v.n=function(e){if(this.n=e){var t=g.a.A(e);this.ab="script"===t?1:"textarea"===t?2:"template"==t&&e.content&&11===e.content.nodeType?3:4}},g.v.n.prototype.text=function(){var e=1===this.ab?"text":2===this.ab?"value":"innerHTML";if(0==arguments.length)return this.n[e];var t=arguments[0];"innerHTML"===e?g.a.Cb(this.n,t):this.n[e]=t};var t=g.a.e.I()+"_";g.v.n.prototype.data=function(e){return 1===arguments.length?g.a.e.get(this.n,t+e):void g.a.e.set(this.n,t+e,arguments[1])};var n=g.a.e.I();g.v.n.prototype.nodes=function(){var t=this.n;return 0==arguments.length?(g.a.e.get(t,n)||{}).jb||(3===this.ab?t.content:4===this.ab?t:e):void g.a.e.set(t,n,{jb:arguments[0]})},g.v.qa=function(e){this.n=e},g.v.qa.prototype=new g.v.n,g.v.qa.prototype.text=function(){if(0==arguments.length){var t=g.a.e.get(this.n,n)||{};return t.Hb===e&&t.jb&&(t.Hb=t.jb.innerHTML),t.Hb}g.a.e.set(this.n,n,{Hb:arguments[0]})},g.b("templateSources",g.v),g.b("templateSources.domElement",g.v.n),g.b("templateSources.anonymousTemplate",g.v.qa)}(),function(){function t(e,t,n){var r;for(t=g.f.nextSibling(t);e&&(r=e)!==t;)e=g.f.nextSibling(r),n(r,e)}function n(e,n){if(e.length){var r=e[0],i=e[e.length-1],o=r.parentNode,a=g.R.instance,s=a.preprocessNode;if(s){if(t(r,i,function(e,t){var n=e.previousSibling,o=s.call(a,e);o&&(e===r&&(r=o[0]||t),e===i&&(i=o[o.length-1]||n))}),e.length=0,!r)return;r===i?e.push(r):(e.push(r,i),g.a.za(e,o))}t(r,i,function(e){1!==e.nodeType&&8!==e.nodeType||g.Sb(n,e)}),t(r,i,function(e){1!==e.nodeType&&8!==e.nodeType||g.M.Ac(e,[n])}),g.a.za(e,o)}}function r(e){return e.nodeType?e:0<e.length?e[0]:null}function i(e,t,i,o,s){s=s||{};var u=(e&&r(e)||i||{}).ownerDocument,c=s.templateEngine||a;if(g.Gb.Pc(i,c,u),i=c.renderTemplate(i,o,s,u),"number"!=typeof i.length||0<i.length&&"number"!=typeof i[0].nodeType)throw Error("Template engine must return an array of DOM nodes");switch(u=!1,t){case"replaceChildren":g.f.da(e,i),u=!0;break;case"replaceNode":g.a.sc(e,i),u=!0;break;case"ignoreTargetNode":break;default:throw Error("Unknown renderMode: "+t)}return u&&(n(i,o),s.afterRender&&g.l.w(s.afterRender,null,[i,o.$data])),i}function o(e,t,n){return g.H(e)?e():"function"==typeof e?e(t,n):e}var a;g.Db=function(t){if(t!=e&&!(t instanceof g.O))throw Error("templateEngine must inherit from ko.templateEngine");a=t},g.Ab=function(t,n,s,u,c){if(s=s||{},(s.templateEngine||a)==e)throw Error("Set a template engine before calling renderTemplate");if(c=c||"replaceChildren",u){var l=r(u);return g.B(function(){var e=n&&n instanceof g.Q?n:new g.Q(n,null,null,null,{exportDependencies:!0}),a=o(t,e.$data,e),e=i(u,c,a,e,s);"replaceNode"==c&&(u=e,l=r(u))},null,{wa:function(){return!l||!g.a.nb(l)},i:l&&"replaceNode"==c?l.parentNode:l})}return g.M.wb(function(e){g.Ab(t,n,s,e,"replaceNode")})},g.ld=function(t,r,a,s,u){function c(e,t){n(t,f),a.afterRender&&a.afterRender(t,e),f=null}function l(e,n){f=u.createChildContext(e,a.as,function(e){e.$index=n});var r=o(t,e,f);return i(null,"ignoreTargetNode",r,f,a)}var f;return g.B(function(){var t=g.a.c(r)||[];"undefined"==typeof t.length&&(t=[t]),t=g.a.Ka(t,function(t){return a.includeDestroyed||t===e||null===t||!g.a.c(t._destroy)}),g.l.w(g.a.Bb,null,[s,t,l,a,c])},null,{i:s})};var s=g.a.e.I();g.d.template={init:function(e,t){var n=g.a.c(t());if("string"==typeof n||n.name)g.f.xa(e);else{if("nodes"in n){if(n=n.nodes||[],g.H(n))throw Error('The "nodes" option must be a plain, non-observable array.')}else n=g.f.childNodes(e);n=g.a.lc(n),new g.v.qa(e).nodes(n)}return{controlsDescendantBindings:!0}},update:function(t,n,r,i,o){var a=n();n=g.a.c(a),r=!0,i=null,"string"==typeof n?n={}:(a=n.name,"if"in n&&(r=g.a.c(n.if)),r&&"ifnot"in n&&(r=!g.a.c(n.ifnot))),"foreach"in n?i=g.ld(a||t,r&&n.foreach||[],n,t,o):r?(o="data"in n?o.Zb(n.data,n.as):o,i=g.Ab(a||t,o,n,t)):g.f.xa(t),o=i,(n=g.a.e.get(t,s))&&"function"==typeof n.k&&n.k(),g.a.e.set(t,s,o&&o.ba()?o:e)}},g.h.ta.template=function(e){return e=g.h.yb(e),1==e.length&&e[0].unknown||g.h.bd(e,"name")?null:"This template engine does not support anonymous templates nested within its templates"},g.f.Z.template=!0}(),g.b("setTemplateEngine",g.Db),g.b("renderTemplate",g.Ab),g.a.fc=function(e,t,n){if(e.length&&t.length){var r,i,o,a,s;for(r=i=0;(!n||r<n)&&(a=e[i]);++i){for(o=0;s=t[o];++o)if(a.value===s.value){a.moved=s.index,s.moved=a.index,t.splice(o,1),r=o=0;break}r+=o}}},g.a.ib=function(){function e(e,t,n,r,i){var o,a,s,u,c,l=Math.min,f=Math.max,p=[],d=e.length,h=t.length,m=h-d||1,v=d+h+1;for(o=0;o<=d;o++)for(u=s,p.push(s=[]),c=l(h,o+m),a=f(0,o-1);a<=c;a++)s[a]=a?o?e[o-1]===t[a-1]?u[a-1]:l(u[a]||v,s[a-1]||v)+1:a+1:o+1;for(l=[],f=[],m=[],o=d,a=h;o||a;)h=p[o][a]-1,a&&h===p[o][a-1]?f.push(l[l.length]={status:n,value:t[--a],index:a}):o&&h===p[o-1][a]?m.push(l[l.length]={status:r,value:e[--o],index:o}):(--a,--o,i.sparse||l.push({status:"retained",value:t[a]}));return g.a.fc(m,f,!i.dontLimitMoves&&10*d),l.reverse()}return function(t,n,r){return r="boolean"==typeof r?{dontLimitMoves:r}:r||{},t=t||[],n=n||[],t.length<n.length?e(t,n,"added","deleted",r):e(n,t,"deleted","added",r)}}(),g.b("utils.compareArrays",g.a.ib),function(){function t(t,n,r,i,o){var a=[],s=g.B(function(){var e=n(r,o,g.a.za(a,t))||[];0<a.length&&(g.a.sc(a,e),i&&g.l.w(i,null,[r,e,o])),a.length=0,g.a.ra(a,e)},null,{i:t,wa:function(){return!g.a.Rb(a)}});return{ca:a,B:s.ba()?s:e}}var n=g.a.e.I(),r=g.a.e.I();g.a.Bb=function(i,o,a,s,u){function c(e,t){w=p[t],y!==t&&(k[e]=w),w.qb(y++),g.a.za(w.ca,i),m.push(w),x.push(w)}function l(e,t){if(e)for(var n=0,r=t.length;n<r;n++)t[n]&&g.a.q(t[n].ca,function(r){e(r,n,t[n].ja)})}o=o||[],s=s||{};var f=g.a.e.get(i,n)===e,p=g.a.e.get(i,n)||[],d=g.a.fb(p,function(e){return e.ja}),h=g.a.ib(d,o,s.dontLimitMoves),m=[],v=0,y=0,b=[],x=[];o=[];for(var w,T,C,k=[],d=[],E=0;T=h[E];E++)switch(C=T.moved,T.status){case"deleted":C===e&&(w=p[v],w.B&&(w.B.k(),w.B=e),g.a.za(w.ca,i).length&&(s.beforeRemove&&(m.push(w),x.push(w),w.ja===r?w=null:o[E]=w),w&&b.push.apply(b,w.ca))),v++;break;case"retained":c(E,v++);break;case"added":C!==e?c(E,C):(w={ja:T.value,qb:g.N(y++)},m.push(w),x.push(w),f||(d[E]=w))}g.a.e.set(i,n,m),l(s.beforeMove,k),g.a.q(b,s.beforeRemove?g.$:g.removeNode);for(var N,E=0,f=g.f.firstChild(i);w=x[E];E++){for(w.ca||g.a.extend(w,t(i,a,w.ja,u,w.qb)),v=0;h=w.ca[v];f=h.nextSibling,N=h,v++)h!==f&&g.f.ic(i,h,N);!w.Xc&&u&&(u(w.ja,w.ca,w.qb),w.Xc=!0)}for(l(s.beforeRemove,o),E=0;E<o.length;++E)o[E]&&(o[E].ja=r);l(s.afterMove,k),l(s.afterAdd,d)}}(),g.b("utils.setDomNodeChildrenFromArrayMapping",g.a.Bb),g.W=function(){this.allowTemplateRewriting=!1},g.W.prototype=new g.O,g.W.prototype.renderTemplateSource=function(e,t,n,r){return(t=(9>g.a.C?0:e.nodes)?e.nodes():null)?g.a.V(t.cloneNode(!0).childNodes):(e=e.text(),g.a.ma(e,r))},g.W.sb=new g.W,g.Db(g.W.sb),g.b("nativeTemplateEngine",g.W),function(){g.vb=function(){var e=this.ad=function(){if(!i||!i.tmpl)return 0;try{if(0<=i.tmpl.tag.tmpl.open.toString().indexOf("__"))return 2}catch(e){}return 1}();this.renderTemplateSource=function(t,r,o,a){if(a=a||n,o=o||{},2>e)throw Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.");var s=t.data("precompiled");return s||(s=t.text()||"",s=i.template(null,"{{ko_with $item.koBindingContext}}"+s+"{{/ko_with}}"),t.data("precompiled",s)),t=[r.$data],r=i.extend({koBindingContext:r},o.templateOptions),r=i.tmpl(s,t,r),r.appendTo(a.createElement("div")),i.fragments={},r},this.createJavaScriptEvaluatorBlock=function(e){return"{{ko_code ((function() { return "+e+" })()) }}"},this.addTemplate=function(e,t){n.write("<script type='text/html' id='"+e+"'>"+t+"</script>")},0<e&&(i.tmpl.tag.ko_code={open:"__.push($1 || '');"},i.tmpl.tag.ko_with={open:"with($1) {",close:"} "})},g.vb.prototype=new g.O;var e=new g.vb;0<e.ad&&g.Db(e),g.b("jqueryTmplTemplateEngine",g.vb)}()})}()}(),function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function n(e,t){t=t||te;var n=t.createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function r(e){var t=!!e&&"length"in e&&e.length,n=he.type(e);return"function"!==n&&!he.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function i(e,t,n){return he.isFunction(t)?he.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?he.grep(e,function(e){return e===t!==n}):"string"!=typeof t?he.grep(e,function(e){return ae.call(t,e)>-1!==n}):ke.test(t)?he.filter(t,e,n):(t=he.filter(t,e),he.grep(e,function(e){return ae.call(t,e)>-1!==n&&1===e.nodeType}))}function o(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function a(e){var t={};return he.each(e.match(je)||[],function(e,n){t[n]=!0}),t}function s(e){return e}function u(e){throw e}function c(e,t,n){var r;try{e&&he.isFunction(r=e.promise)?r.call(e).done(t).fail(n):e&&he.isFunction(r=e.then)?r.call(e,t,n):t.call(void 0,e)}catch(e){n.call(void 0,e)}}function l(){te.removeEventListener("DOMContentLoaded",l),e.removeEventListener("load",l),he.ready()}function f(){this.expando=he.expando+f.uid++}function p(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:He.test(e)?JSON.parse(e):e)}function d(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Be,"-$&").toLowerCase(),n=e.getAttribute(r),"string"==typeof n){try{n=p(n)}catch(e){}Me.set(e,t,n);
}else n=void 0;return n}function h(e,t,n,r){var i,o=1,a=20,s=r?function(){return r.cur()}:function(){return he.css(e,t,"")},u=s(),c=n&&n[3]||(he.cssNumber[t]?"":"px"),l=(he.cssNumber[t]||"px"!==c&&+u)&&Pe.exec(he.css(e,t));if(l&&l[3]!==c){c=c||l[3],n=n||[],l=+u||1;do o=o||".5",l/=o,he.style(e,t,l+c);while(o!==(o=s()/u)&&1!==o&&--a)}return n&&(l=+l||+u||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=l,r.end=i)),i}function g(e){var t,n=e.ownerDocument,r=e.nodeName,i=Ve[r];return i?i:(t=n.body.appendChild(n.createElement(r)),i=he.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),Ve[r]=i,i)}function m(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)r=e[o],r.style&&(n=r.style.display,t?("none"===n&&(i[o]=_e.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&Ie(r)&&(i[o]=g(r))):"none"!==n&&(i[o]="none",_e.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}function v(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&he.nodeName(e,t)?he.merge([e],n):n}function y(e,t){for(var n=0,r=e.length;n<r;n++)_e.set(e[n],"globalEval",!t||_e.get(t[n],"globalEval"))}function b(e,t,n,r,i){for(var o,a,s,u,c,l,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if(o=e[d],o||0===o)if("object"===he.type(o))he.merge(p,o.nodeType?[o]:o);else if(Ge.test(o)){for(a=a||f.appendChild(t.createElement("div")),s=(ze.exec(o)||["",""])[1].toLowerCase(),u=Xe[s]||Xe._default,a.innerHTML=u[1]+he.htmlPrefilter(o)+u[2],l=u[0];l--;)a=a.lastChild;he.merge(p,a.childNodes),a=f.firstChild,a.textContent=""}else p.push(t.createTextNode(o));for(f.textContent="",d=0;o=p[d++];)if(r&&he.inArray(o,r)>-1)i&&i.push(o);else if(c=he.contains(o.ownerDocument,o),a=v(f.appendChild(o),"script"),c&&y(a),n)for(l=0;o=a[l++];)Je.test(o.type||"")&&n.push(o);return f}function x(){return!0}function w(){return!1}function T(){try{return te.activeElement}catch(e){}}function C(e,t,n,r,i,o){var a,s;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(s in t)C(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),i===!1)i=w;else if(!i)return e;return 1===o&&(a=i,i=function(e){return he().off(e),a.apply(this,arguments)},i.guid=a.guid||(a.guid=he.guid++)),e.each(function(){he.event.add(this,t,i,r,n)})}function k(e,t){return he.nodeName(e,"table")&&he.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e:e}function E(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function N(e){var t=rt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function S(e,t){var n,r,i,o,a,s,u,c;if(1===t.nodeType){if(_e.hasData(e)&&(o=_e.access(e),a=_e.set(t,o),c=o.events)){delete a.handle,a.events={};for(i in c)for(n=0,r=c[i].length;n<r;n++)he.event.add(t,i,c[i][n])}Me.hasData(e)&&(s=Me.access(e),u=he.extend({},s),Me.set(t,u))}}function D(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Ue.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function A(e,t,r,i){t=ie.apply([],t);var o,a,s,u,c,l,f=0,p=e.length,d=p-1,h=t[0],g=he.isFunction(h);if(g||p>1&&"string"==typeof h&&!pe.checkClone&&nt.test(h))return e.each(function(n){var o=e.eq(n);g&&(t[0]=h.call(this,n,o.html())),A(o,t,r,i)});if(p&&(o=b(t,e[0].ownerDocument,!1,e,i),a=o.firstChild,1===o.childNodes.length&&(o=a),a||i)){for(s=he.map(v(o,"script"),E),u=s.length;f<p;f++)c=o,f!==d&&(c=he.clone(c,!0,!0),u&&he.merge(s,v(c,"script"))),r.call(e[f],c,f);if(u)for(l=s[s.length-1].ownerDocument,he.map(s,N),f=0;f<u;f++)c=s[f],Je.test(c.type||"")&&!_e.access(c,"globalEval")&&he.contains(l,c)&&(c.src?he._evalUrl&&he._evalUrl(c.src):n(c.textContent.replace(it,""),l))}return e}function j(e,t,n){for(var r,i=t?he.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||he.cleanData(v(r)),r.parentNode&&(n&&he.contains(r.ownerDocument,r)&&y(v(r,"script")),r.parentNode.removeChild(r));return e}function L(e,t,n){var r,i,o,a,s=e.style;return n=n||st(e),n&&(a=n.getPropertyValue(t)||n[t],""!==a||he.contains(e.ownerDocument,e)||(a=he.style(e,t)),!pe.pixelMarginRight()&&at.test(a)&&ot.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function O(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function q(e){if(e in pt)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=ft.length;n--;)if(e=ft[n]+t,e in pt)return e}function F(e,t,n){var r=Pe.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function _(e,t,n,r,i){var o,a=0;for(o=n===(r?"border":"content")?4:"width"===t?1:0;o<4;o+=2)"margin"===n&&(a+=he.css(e,n+$e[o],!0,i)),r?("content"===n&&(a-=he.css(e,"padding"+$e[o],!0,i)),"margin"!==n&&(a-=he.css(e,"border"+$e[o]+"Width",!0,i))):(a+=he.css(e,"padding"+$e[o],!0,i),"padding"!==n&&(a+=he.css(e,"border"+$e[o]+"Width",!0,i)));return a}function M(e,t,n){var r,i=!0,o=st(e),a="border-box"===he.css(e,"boxSizing",!1,o);if(e.getClientRects().length&&(r=e.getBoundingClientRect()[t]),r<=0||null==r){if(r=L(e,t,o),(r<0||null==r)&&(r=e.style[t]),at.test(r))return r;i=a&&(pe.boxSizingReliable()||r===e.style[t]),r=parseFloat(r)||0}return r+_(e,t,n||(a?"border":"content"),i,o)+"px"}function H(e,t,n,r,i){return new H.prototype.init(e,t,n,r,i)}function B(){ht&&(e.requestAnimationFrame(B),he.fx.tick())}function R(){return e.setTimeout(function(){dt=void 0}),dt=he.now()}function P(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)n=$e[r],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function $(e,t,n){for(var r,i=(V.tweeners[t]||[]).concat(V.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function I(e,t,n){var r,i,o,a,s,u,c,l,f="width"in t||"height"in t,p=this,d={},h=e.style,g=e.nodeType&&Ie(e),v=_e.get(e,"fxshow");n.queue||(a=he._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,he.queue(e,"fx").length||a.empty.fire()})}));for(r in t)if(i=t[r],gt.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;g=!0}d[r]=v&&v[r]||he.style(e,r)}if(u=!he.isEmptyObject(t),u||!he.isEmptyObject(d)){f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],c=v&&v.display,null==c&&(c=_e.get(e,"display")),l=he.css(e,"display"),"none"===l&&(c?l=c:(m([e],!0),c=e.style.display||c,l=he.css(e,"display"),m([e]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===he.css(e,"float")&&(u||(p.done(function(){h.display=c}),null==c&&(l=h.display,c="none"===l?"":l)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1;for(r in d)u||(v?"hidden"in v&&(g=v.hidden):v=_e.access(e,"fxshow",{display:c}),o&&(v.hidden=!g),g&&m([e],!0),p.done(function(){g||m([e]),_e.remove(e,"fxshow");for(r in d)he.style(e,r,d[r])})),u=$(g?v[r]:0,r,p),r in v||(v[r]=u.start,g&&(u.end=u.start,u.start=0))}}function W(e,t){var n,r,i,o,a;for(n in e)if(r=he.camelCase(n),i=t[r],o=e[n],he.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),a=he.cssHooks[r],a&&"expand"in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function V(e,t,n){var r,i,o=0,a=V.prefilters.length,s=he.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=dt||R(),n=Math.max(0,c.startTime+c.duration-t),r=n/c.duration||0,o=1-r,a=0,u=c.tweens.length;a<u;a++)c.tweens[a].run(o);return s.notifyWith(e,[c,o,n]),o<1&&u?n:(s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:he.extend({},t),opts:he.extend(!0,{specialEasing:{},easing:he.easing._default},n),originalProperties:t,originalOptions:n,startTime:dt||R(),duration:n.duration,tweens:[],createTween:function(t,n){var r=he.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),l=c.props;for(W(l,c.opts.specialEasing);o<a;o++)if(r=V.prefilters[o].call(c,e,l,c.opts))return he.isFunction(r.stop)&&(he._queueHooks(c.elem,c.opts.queue).stop=he.proxy(r.stop,r)),r;return he.map(l,$,c),he.isFunction(c.opts.start)&&c.opts.start.call(e,c),he.fx.timer(he.extend(u,{elem:e,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function U(e){var t=e.match(je)||[];return t.join(" ")}function z(e){return e.getAttribute&&e.getAttribute("class")||""}function J(e,t,n,r){var i;if(he.isArray(t))he.each(t,function(t,i){n||Nt.test(e)?r(e,i):J(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==he.type(t))r(e,t);else for(i in t)J(e+"["+i+"]",t[i],n,r)}function X(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(je)||[];if(he.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function G(e,t,n,r){function i(s){var u;return o[s]=!0,he.each(e[s]||[],function(e,s){var c=s(t,n,r);return"string"!=typeof c||a||o[c]?a?!(u=c):void 0:(t.dataTypes.unshift(c),i(c),!1)}),u}var o={},a=e===Bt;return i(t.dataTypes[0])||!o["*"]&&i("*")}function Y(e,t){var n,r,i=he.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&he.extend(!0,e,r),e}function Q(e,t,n){for(var r,i,o,a,s=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}function K(e,t,n,r){var i,o,a,s,u,c={},l=e.dataTypes.slice();if(l[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(o=l.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=l.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(a=c[u+" "+o]||c["* "+o],!a)for(i in c)if(s=i.split(" "),s[1]===o&&(a=c[u+" "+s[0]]||c["* "+s[0]])){a===!0?a=c[i]:c[i]!==!0&&(o=s[0],l.unshift(s[1]));break}if(a!==!0)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}function Z(e){return he.isWindow(e)?e:9===e.nodeType&&e.defaultView}var ee=[],te=e.document,ne=Object.getPrototypeOf,re=ee.slice,ie=ee.concat,oe=ee.push,ae=ee.indexOf,se={},ue=se.toString,ce=se.hasOwnProperty,le=ce.toString,fe=le.call(Object),pe={},de="3.1.1",he=function(e,t){return new he.fn.init(e,t)},ge=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,me=/^-ms-/,ve=/-([a-z])/g,ye=function(e,t){return t.toUpperCase()};he.fn=he.prototype={jquery:de,constructor:he,length:0,toArray:function(){return re.call(this)},get:function(e){return null==e?re.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=he.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return he.each(this,e)},map:function(e){return this.pushStack(he.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(re.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:oe,sort:ee.sort,splice:ee.splice},he.extend=he.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||he.isFunction(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],r=e[t],a!==r&&(c&&r&&(he.isPlainObject(r)||(i=he.isArray(r)))?(i?(i=!1,o=n&&he.isArray(n)?n:[]):o=n&&he.isPlainObject(n)?n:{},a[t]=he.extend(c,o,r)):void 0!==r&&(a[t]=r));return a},he.extend({expando:"jQuery"+(de+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===he.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=he.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==ue.call(e))&&(!(t=ne(e))||(n=ce.call(t,"constructor")&&t.constructor,"function"==typeof n&&le.call(n)===fe))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?se[ue.call(e)]||"object":typeof e},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(me,"ms-").replace(ve,ye)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var n,i=0;if(r(e))for(n=e.length;i<n&&t.call(e[i],i,e[i])!==!1;i++);else for(i in e)if(t.call(e[i],i,e[i])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(ge,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(r(Object(e))?he.merge(n,"string"==typeof e?[e]:e):oe.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:ae.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,a=e.length,s=!n;o<a;o++)r=!t(e[o],o),r!==s&&i.push(e[o]);return i},map:function(e,t,n){var i,o,a=0,s=[];if(r(e))for(i=e.length;a<i;a++)o=t(e[a],a,n),null!=o&&s.push(o);else for(a in e)o=t(e[a],a,n),null!=o&&s.push(o);return ie.apply([],s)},guid:1,proxy:function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),he.isFunction(e))return r=re.call(arguments,2),i=function(){return e.apply(t||this,r.concat(re.call(arguments)))},i.guid=e.guid=e.guid||he.guid++,i},now:Date.now,support:pe}),"function"==typeof Symbol&&(he.fn[Symbol.iterator]=ee[Symbol.iterator]),he.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){se["[object "+t+"]"]=t.toLowerCase()});var be=function(e){function t(e,t,n,r){var i,o,a,s,u,c,l,p=t&&t.ownerDocument,h=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return n;if(!r&&((t?t.ownerDocument||t:$)!==q&&O(t),t=t||q,_)){if(11!==h&&(u=ve.exec(e)))if(i=u[1]){if(9===h){if(!(a=t.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(p&&(a=p.getElementById(i))&&R(t,a)&&a.id===i)return n.push(a),n}else{if(u[2])return K.apply(n,t.getElementsByTagName(e)),n;if((i=u[3])&&T.getElementsByClassName&&t.getElementsByClassName)return K.apply(n,t.getElementsByClassName(i)),n}if(T.qsa&&!z[e+" "]&&(!M||!M.test(e))){if(1!==h)p=t,l=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace(we,Te):t.setAttribute("id",s=P),c=N(e),o=c.length;o--;)c[o]="#"+s+" "+d(c[o]);l=c.join(","),p=ye.test(e)&&f(t.parentNode)||t}if(l)try{return K.apply(n,p.querySelectorAll(l)),n}catch(e){}finally{s===P&&t.removeAttribute("id")}}}return D(e.replace(se,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>C.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[P]=!0,e}function i(e){var t=q.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=n.length;r--;)C.attrHandle[n[r]]=t}function a(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function u(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function c(e){return function(t){return"form"in t?t.parentNode&&t.disabled===!1?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ke(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function f(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function p(){}function d(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function h(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=W++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,u){var c,l,f,p=[I,s];if(u){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(f=t[P]||(t[P]={}),l=f[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=l[o])&&c[0]===I&&c[1]===s)return p[2]=c[2];if(l[o]=p,p[2]=e(t,n,u))return!0}return!1}}function g(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function m(e,n,r){for(var i=0,o=n.length;i<o;i++)t(e,n[i],r);return r}function v(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,c=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),c&&t.push(s)));return a}function y(e,t,n,i,o,a){return i&&!i[P]&&(i=y(i)),o&&!o[P]&&(o=y(o,a)),r(function(r,a,s,u){var c,l,f,p=[],d=[],h=a.length,g=r||m(t||"*",s.nodeType?[s]:s,[]),y=!e||!r&&t?g:v(g,p,e,s,u),b=n?o||(r?e:h||i)?[]:a:y;if(n&&n(y,b,s,u),i)for(c=v(b,d),i(c,[],s,u),l=c.length;l--;)(f=c[l])&&(b[d[l]]=!(y[d[l]]=f));if(r){if(o||e){if(o){for(c=[],l=b.length;l--;)(f=b[l])&&c.push(y[l]=f);o(null,b=[],c,u)}for(l=b.length;l--;)(f=b[l])&&(c=o?ee(r,f):p[l])>-1&&(r[c]=!(a[c]=f))}}else b=v(b===a?b.splice(h,b.length):b),o?o(null,a,b,u):K.apply(a,b)})}function b(e){for(var t,n,r,i=e.length,o=C.relative[e[0].type],a=o||C.relative[" "],s=o?1:0,u=h(function(e){return e===t},a,!0),c=h(function(e){return ee(t,e)>-1},a,!0),l=[function(e,n,r){var i=!o&&(r||n!==A)||((t=n).nodeType?u(e,n,r):c(e,n,r));return t=null,i}];s<i;s++)if(n=C.relative[e[s].type])l=[h(g(l),n)];else{if(n=C.filter[e[s].type].apply(null,e[s].matches),n[P]){for(r=++s;r<i&&!C.relative[e[r].type];r++);return y(s>1&&g(l),s>1&&d(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(se,"$1"),n,s<r&&b(e.slice(s,r)),r<i&&b(e=e.slice(r)),r<i&&d(e))}l.push(n)}return g(l)}function x(e,n){var i=n.length>0,o=e.length>0,a=function(r,a,s,u,c){var l,f,p,d=0,h="0",g=r&&[],m=[],y=A,b=r||o&&C.find.TAG("*",c),x=I+=null==y?1:Math.random()||.1,w=b.length;for(c&&(A=a===q||a||c);h!==w&&null!=(l=b[h]);h++){if(o&&l){for(f=0,a||l.ownerDocument===q||(O(l),s=!_);p=e[f++];)if(p(l,a||q,s)){u.push(l);break}c&&(I=x)}i&&((l=!p&&l)&&d--,r&&g.push(l))}if(d+=h,i&&h!==d){for(f=0;p=n[f++];)p(g,m,a,s);if(r){if(d>0)for(;h--;)g[h]||m[h]||(m[h]=Y.call(u));m=v(m)}K.apply(u,m),c&&!r&&m.length>0&&d+n.length>1&&t.uniqueSort(u)}return c&&(I=x,A=y),g};return i?r(a):a}var w,T,C,k,E,N,S,D,A,j,L,O,q,F,_,M,H,B,R,P="sizzle"+1*new Date,$=e.document,I=0,W=0,V=n(),U=n(),z=n(),J=function(e,t){return e===t&&(L=!0),0},X={}.hasOwnProperty,G=[],Y=G.pop,Q=G.push,K=G.push,Z=G.slice,ee=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",re="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ie="\\["+ne+"*("+re+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+re+"))|)"+ne+"*\\]",oe=":("+re+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ie+")*)|.*)\\)|)",ae=new RegExp(ne+"+","g"),se=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),ue=new RegExp("^"+ne+"*,"+ne+"*"),ce=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),le=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),fe=new RegExp(oe),pe=new RegExp("^"+re+"$"),de={ID:new RegExp("^#("+re+")"),CLASS:new RegExp("^\\.("+re+")"),TAG:new RegExp("^("+re+"|[*])"),ATTR:new RegExp("^"+ie),PSEUDO:new RegExp("^"+oe),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},he=/^(?:input|select|textarea|button)$/i,ge=/^h\d$/i,me=/^[^{]+\{\s*\[native \w/,ve=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ye=/[+~]/,be=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),xe=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},we=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,Te=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},Ce=function(){O()},ke=h(function(e){return e.disabled===!0&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{K.apply(G=Z.call($.childNodes),$.childNodes),G[$.childNodes.length].nodeType}catch(e){K={apply:G.length?function(e,t){Q.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}T=t.support={},E=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},O=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:$;return r!==q&&9===r.nodeType&&r.documentElement?(q=r,F=q.documentElement,_=!E(q),$!==q&&(n=q.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",Ce,!1):n.attachEvent&&n.attachEvent("onunload",Ce)),T.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),T.getElementsByTagName=i(function(e){return e.appendChild(q.createComment("")),!e.getElementsByTagName("*").length}),T.getElementsByClassName=me.test(q.getElementsByClassName),T.getById=i(function(e){return F.appendChild(e).id=P,!q.getElementsByName||!q.getElementsByName(P).length}),T.getById?(C.filter.ID=function(e){var t=e.replace(be,xe);return function(e){return e.getAttribute("id")===t}},C.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&_){var n=t.getElementById(e);return n?[n]:[]}}):(C.filter.ID=function(e){var t=e.replace(be,xe);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},C.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&_){var n,r,i,o=t.getElementById(e);if(o){if(n=o.getAttributeNode("id"),n&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if(n=o.getAttributeNode("id"),n&&n.value===e)return[o]}return[]}}),C.find.TAG=T.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):T.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},C.find.CLASS=T.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&_)return t.getElementsByClassName(e)},H=[],M=[],(T.qsa=me.test(q.querySelectorAll))&&(i(function(e){F.appendChild(e).innerHTML="<a id='"+P+"'></a><select id='"+P+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&M.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||M.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+P+"-]").length||M.push("~="),e.querySelectorAll(":checked").length||M.push(":checked"),e.querySelectorAll("a#"+P+"+*").length||M.push(".#.+[+~]")}),i(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=q.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&M.push("name"+ne+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&M.push(":enabled",":disabled"),F.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&M.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),M.push(",.*:")})),(T.matchesSelector=me.test(B=F.matches||F.webkitMatchesSelector||F.mozMatchesSelector||F.oMatchesSelector||F.msMatchesSelector))&&i(function(e){T.disconnectedMatch=B.call(e,"*"),B.call(e,"[s!='']:x"),H.push("!=",oe)}),M=M.length&&new RegExp(M.join("|")),H=H.length&&new RegExp(H.join("|")),t=me.test(F.compareDocumentPosition),R=t||me.test(F.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},J=t?function(e,t){if(e===t)return L=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!T.sortDetached&&t.compareDocumentPosition(e)===n?e===q||e.ownerDocument===$&&R($,e)?-1:t===q||t.ownerDocument===$&&R($,t)?1:j?ee(j,e)-ee(j,t):0:4&n?-1:1)}:function(e,t){if(e===t)return L=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,s=[e],u=[t];if(!i||!o)return e===q?-1:t===q?1:i?-1:o?1:j?ee(j,e)-ee(j,t):0;if(i===o)return a(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)u.unshift(n);for(;s[r]===u[r];)r++;return r?a(s[r],u[r]):s[r]===$?-1:u[r]===$?1:0},q):q},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==q&&O(e),n=n.replace(le,"='$1']"),T.matchesSelector&&_&&!z[n+" "]&&(!H||!H.test(n))&&(!M||!M.test(n)))try{var r=B.call(e,n);if(r||T.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return t(n,q,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==q&&O(e),R(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==q&&O(e);var n=C.attrHandle[t.toLowerCase()],r=n&&X.call(C.attrHandle,t.toLowerCase())?n(e,t,!_):void 0;return void 0!==r?r:T.attributes||!_?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.escape=function(e){return(e+"").replace(we,Te)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(L=!T.detectDuplicates,j=!T.sortStable&&e.slice(0),e.sort(J),L){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return j=null,e},k=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=k(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=k(t);return n},C=t.selectors={cacheLength:50,createPseudo:r,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(be,xe),e[3]=(e[3]||e[4]||e[5]||"").replace(be,xe),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&fe.test(n)&&(t=N(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(be,xe).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=V[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&V(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:!n||(o+="","="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(ae," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var c,l,f,p,d,h,g=o!==a?"nextSibling":"previousSibling",m=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!u&&!s,b=!1;if(m){if(o){for(;g;){for(p=t;p=p[g];)if(s?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&y){for(p=m,f=p[P]||(p[P]={}),l=f[p.uniqueID]||(f[p.uniqueID]={}),c=l[e]||[],d=c[0]===I&&c[1],b=d&&c[2],p=d&&m.childNodes[d];p=++d&&p&&p[g]||(b=d=0)||h.pop();)if(1===p.nodeType&&++b&&p===t){l[e]=[I,d,b];break}}else if(y&&(p=t,f=p[P]||(p[P]={}),l=f[p.uniqueID]||(f[p.uniqueID]={}),c=l[e]||[],d=c[0]===I&&c[1],b=d),b===!1)for(;(p=++d&&p&&p[g]||(b=d=0)||h.pop())&&((s?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++b||(y&&(f=p[P]||(p[P]={}),l=f[p.uniqueID]||(f[p.uniqueID]={}),l[e]=[I,b]),p!==t)););return b-=i,b===r||b%r===0&&b/r>=0}}},PSEUDO:function(e,n){var i,o=C.pseudos[e]||C.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[P]?o(n):o.length>1?(i=[e,e,"",n],C.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),a=i.length;a--;)r=ee(e,i[a]),e[r]=!(t[r]=i[a])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=S(e.replace(se,"$1"));return i[P]?r(function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(be,xe),function(t){return(t.textContent||t.innerText||k(t)).indexOf(e)>-1}}),lang:r(function(e){return pe.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(be,xe).toLowerCase(),function(t){var n;do if(n=_?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===F},focus:function(e){return e===q.activeElement&&(!q.hasFocus||q.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:c(!1),disabled:c(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!C.pseudos.empty(e)},header:function(e){return ge.test(e.nodeName)},input:function(e){return he.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:l(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}},C.pseudos.nth=C.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})C.pseudos[w]=s(w);for(w in{submit:!0,reset:!0})C.pseudos[w]=u(w);return p.prototype=C.filters=C.pseudos,C.setFilters=new p,N=t.tokenize=function(e,n){var r,i,o,a,s,u,c,l=U[e+" "];if(l)return n?0:l.slice(0);for(s=e,u=[],c=C.preFilter;s;){r&&!(i=ue.exec(s))||(i&&(s=s.slice(i[0].length)||s),
u.push(o=[])),r=!1,(i=ce.exec(s))&&(r=i.shift(),o.push({value:r,type:i[0].replace(se," ")}),s=s.slice(r.length));for(a in C.filter)!(i=de[a].exec(s))||c[a]&&!(i=c[a](i))||(r=i.shift(),o.push({value:r,type:a,matches:i}),s=s.slice(r.length));if(!r)break}return n?s.length:s?t.error(e):U(e,u).slice(0)},S=t.compile=function(e,t){var n,r=[],i=[],o=z[e+" "];if(!o){for(t||(t=N(e)),n=t.length;n--;)o=b(t[n]),o[P]?r.push(o):i.push(o);o=z(e,x(i,r)),o.selector=e}return o},D=t.select=function(e,t,n,r){var i,o,a,s,u,c="function"==typeof e&&e,l=!r&&N(e=c.selector||e);if(n=n||[],1===l.length){if(o=l[0]=l[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&9===t.nodeType&&_&&C.relative[o[1].type]){if(t=(C.find.ID(a.matches[0].replace(be,xe),t)||[])[0],!t)return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=de.needsContext.test(e)?0:o.length;i--&&(a=o[i],!C.relative[s=a.type]);)if((u=C.find[s])&&(r=u(a.matches[0].replace(be,xe),ye.test(o[0].type)&&f(t.parentNode)||t))){if(o.splice(i,1),e=r.length&&d(o),!e)return K.apply(n,r),n;break}}return(c||S(e,l))(r,t,!_,n,!t||ye.test(e)&&f(t.parentNode)||t),n},T.sortStable=P.split("").sort(J).join("")===P,T.detectDuplicates=!!L,O(),T.sortDetached=i(function(e){return 1&e.compareDocumentPosition(q.createElement("fieldset"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),T.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,n){var r;if(!n)return e[t]===!0?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);he.find=be,he.expr=be.selectors,he.expr[":"]=he.expr.pseudos,he.uniqueSort=he.unique=be.uniqueSort,he.text=be.getText,he.isXMLDoc=be.isXML,he.contains=be.contains,he.escapeSelector=be.escape;var xe=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&he(e).is(n))break;r.push(e)}return r},we=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},Te=he.expr.match.needsContext,Ce=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,ke=/^.[^:#\[\.,]*$/;he.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?he.find.matchesSelector(r,e)?[r]:[]:he.find.matches(e,he.grep(t,function(e){return 1===e.nodeType}))},he.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(he(e).filter(function(){for(t=0;t<r;t++)if(he.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)he.find(e,i[t],n);return r>1?he.uniqueSort(n):n},filter:function(e){return this.pushStack(i(this,e||[],!1))},not:function(e){return this.pushStack(i(this,e||[],!0))},is:function(e){return!!i(this,"string"==typeof e&&Te.test(e)?he(e):e||[],!1).length}});var Ee,Ne=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,Se=he.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||Ee,"string"==typeof e){if(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Ne.exec(e),!r||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof he?t[0]:t,he.merge(this,he.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:te,!0)),Ce.test(r[1])&&he.isPlainObject(t))for(r in t)he.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=te.getElementById(r[2]),i&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):he.isFunction(e)?void 0!==n.ready?n.ready(e):e(he):he.makeArray(e,this)};Se.prototype=he.fn,Ee=he(te);var De=/^(?:parents|prev(?:Until|All))/,Ae={children:!0,contents:!0,next:!0,prev:!0};he.fn.extend({has:function(e){var t=he(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(he.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&he(e);if(!Te.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&he.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?he.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?ae.call(he(e),this[0]):ae.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(he.uniqueSort(he.merge(this.get(),he(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),he.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return xe(e,"parentNode")},parentsUntil:function(e,t,n){return xe(e,"parentNode",n)},next:function(e){return o(e,"nextSibling")},prev:function(e){return o(e,"previousSibling")},nextAll:function(e){return xe(e,"nextSibling")},prevAll:function(e){return xe(e,"previousSibling")},nextUntil:function(e,t,n){return xe(e,"nextSibling",n)},prevUntil:function(e,t,n){return xe(e,"previousSibling",n)},siblings:function(e){return we((e.parentNode||{}).firstChild,e)},children:function(e){return we(e.firstChild)},contents:function(e){return e.contentDocument||he.merge([],e.childNodes)}},function(e,t){he.fn[e]=function(n,r){var i=he.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=he.filter(r,i)),this.length>1&&(Ae[e]||he.uniqueSort(i),De.test(e)&&i.reverse()),this.pushStack(i)}});var je=/[^\x20\t\r\n\f]+/g;he.Callbacks=function(e){e="string"==typeof e?a(e):he.extend({},e);var t,n,r,i,o=[],s=[],u=-1,c=function(){for(i=e.once,r=t=!0;s.length;u=-1)for(n=s.shift();++u<o.length;)o[u].apply(n[0],n[1])===!1&&e.stopOnFalse&&(u=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},l={add:function(){return o&&(n&&!t&&(u=o.length-1,s.push(n)),function t(n){he.each(n,function(n,r){he.isFunction(r)?e.unique&&l.has(r)||o.push(r):r&&r.length&&"string"!==he.type(r)&&t(r)})}(arguments),n&&!t&&c()),this},remove:function(){return he.each(arguments,function(e,t){for(var n;(n=he.inArray(t,o,n))>-1;)o.splice(n,1),n<=u&&u--}),this},has:function(e){return e?he.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=s=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=n||[],n=[e,n.slice?n.slice():n],s.push(n),t||c()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l},he.extend({Deferred:function(t){var n=[["notify","progress",he.Callbacks("memory"),he.Callbacks("memory"),2],["resolve","done",he.Callbacks("once memory"),he.Callbacks("once memory"),0,"resolved"],["reject","fail",he.Callbacks("once memory"),he.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return he.Deferred(function(t){he.each(n,function(n,r){var i=he.isFunction(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&he.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(t,r,i){function o(t,n,r,i){return function(){var c=this,l=arguments,f=function(){var e,f;if(!(t<a)){if(e=r.apply(c,l),e===n.promise())throw new TypeError("Thenable self-resolution");f=e&&("object"==typeof e||"function"==typeof e)&&e.then,he.isFunction(f)?i?f.call(e,o(a,n,s,i),o(a,n,u,i)):(a++,f.call(e,o(a,n,s,i),o(a,n,u,i),o(a,n,s,n.notifyWith))):(r!==s&&(c=void 0,l=[e]),(i||n.resolveWith)(c,l))}},p=i?f:function(){try{f()}catch(e){he.Deferred.exceptionHook&&he.Deferred.exceptionHook(e,p.stackTrace),t+1>=a&&(r!==u&&(c=void 0,l=[e]),n.rejectWith(c,l))}};t?p():(he.Deferred.getStackHook&&(p.stackTrace=he.Deferred.getStackHook()),e.setTimeout(p))}}var a=0;return he.Deferred(function(e){n[0][3].add(o(0,e,he.isFunction(i)?i:s,e.notifyWith)),n[1][3].add(o(0,e,he.isFunction(t)?t:s)),n[2][3].add(o(0,e,he.isFunction(r)?r:u))}).promise()},promise:function(e){return null!=e?he.extend(e,i):i}},o={};return he.each(n,function(e,t){var a=t[2],s=t[5];i[t[1]]=a.add,s&&a.add(function(){r=s},n[3-e][2].disable,n[0][2].lock),a.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=a.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=re.call(arguments),o=he.Deferred(),a=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?re.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(c(e,o.done(a(n)).resolve,o.reject),"pending"===o.state()||he.isFunction(i[n]&&i[n].then)))return o.then();for(;n--;)c(i[n],a(n),o.reject);return o.promise()}});var Le=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;he.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&Le.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},he.readyException=function(t){e.setTimeout(function(){throw t})};var Oe=he.Deferred();he.fn.ready=function(e){return Oe.then(e).catch(function(e){he.readyException(e)}),this},he.extend({isReady:!1,readyWait:1,holdReady:function(e){e?he.readyWait++:he.ready(!0)},ready:function(e){(e===!0?--he.readyWait:he.isReady)||(he.isReady=!0,e!==!0&&--he.readyWait>0||Oe.resolveWith(te,[he]))}}),he.ready.then=Oe.then,"complete"===te.readyState||"loading"!==te.readyState&&!te.documentElement.doScroll?e.setTimeout(he.ready):(te.addEventListener("DOMContentLoaded",l),e.addEventListener("load",l));var qe=function(e,t,n,r,i,o,a){var s=0,u=e.length,c=null==n;if("object"===he.type(n)){i=!0;for(s in n)qe(e,t,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,he.isFunction(r)||(a=!0),c&&(a?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(he(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:c?t.call(e):u?t(e[0],n):o},Fe=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};f.uid=1,f.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Fe(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[he.camelCase(t)]=n;else for(r in t)i[he.camelCase(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][he.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){he.isArray(t)?t=t.map(he.camelCase):(t=he.camelCase(t),t=t in r?[t]:t.match(je)||[]),n=t.length;for(;n--;)delete r[t[n]]}(void 0===t||he.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!he.isEmptyObject(t)}};var _e=new f,Me=new f,He=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Be=/[A-Z]/g;he.extend({hasData:function(e){return Me.hasData(e)||_e.hasData(e)},data:function(e,t,n){return Me.access(e,t,n)},removeData:function(e,t){Me.remove(e,t)},_data:function(e,t,n){return _e.access(e,t,n)},_removeData:function(e,t){_e.remove(e,t)}}),he.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=Me.get(o),1===o.nodeType&&!_e.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(r=a[n].name,0===r.indexOf("data-")&&(r=he.camelCase(r.slice(5)),d(o,r,i[r])));_e.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){Me.set(this,e)}):qe(this,function(t){var n;if(o&&void 0===t){if(n=Me.get(o,e),void 0!==n)return n;if(n=d(o,e),void 0!==n)return n}else this.each(function(){Me.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Me.remove(this,e)})}}),he.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=_e.get(e,t),n&&(!r||he.isArray(n)?r=_e.access(e,t,he.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=he.queue(e,t),r=n.length,i=n.shift(),o=he._queueHooks(e,t),a=function(){he.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return _e.get(e,n)||_e.access(e,n,{empty:he.Callbacks("once memory").add(function(){_e.remove(e,[t+"queue",n])})})}}),he.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?he.queue(this[0],e):void 0===t?this:this.each(function(){var n=he.queue(this,e,t);he._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&he.dequeue(this,e)})},dequeue:function(e){return this.each(function(){he.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=he.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)n=_e.get(o[a],e+"queueHooks"),n&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var Re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Pe=new RegExp("^(?:([+-])=|)("+Re+")([a-z%]*)$","i"),$e=["Top","Right","Bottom","Left"],Ie=function(e,t){return e=t||e,"none"===e.style.display||""===e.style.display&&he.contains(e.ownerDocument,e)&&"none"===he.css(e,"display")},We=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i},Ve={};he.fn.extend({show:function(){return m(this,!0)},hide:function(){return m(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Ie(this)?he(this).show():he(this).hide()})}});var Ue=/^(?:checkbox|radio)$/i,ze=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Je=/^$|\/(?:java|ecma)script/i,Xe={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Xe.optgroup=Xe.option,Xe.tbody=Xe.tfoot=Xe.colgroup=Xe.caption=Xe.thead,Xe.th=Xe.td;var Ge=/<|&#?\w+;/;!function(){var e=te.createDocumentFragment(),t=e.appendChild(te.createElement("div")),n=te.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),pe.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",pe.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Ye=te.documentElement,Qe=/^key/,Ke=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ze=/^([^.]*)(?:\.(.+)|)/;he.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,c,l,f,p,d,h,g,m=_e.get(e);if(m)for(n.handler&&(o=n,n=o.handler,i=o.selector),i&&he.find.matchesSelector(Ye,i),n.guid||(n.guid=he.guid++),(u=m.events)||(u=m.events={}),(a=m.handle)||(a=m.handle=function(t){return"undefined"!=typeof he&&he.event.triggered!==t.type?he.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(je)||[""],c=t.length;c--;)s=Ze.exec(t[c])||[],d=g=s[1],h=(s[2]||"").split(".").sort(),d&&(f=he.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=he.event.special[d]||{},l=he.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&he.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||(p=u[d]=[],p.delegateCount=0,f.setup&&f.setup.call(e,r,h,a)!==!1||e.addEventListener&&e.addEventListener(d,a)),f.add&&(f.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,l):p.push(l),he.event.global[d]=!0)},remove:function(e,t,n,r,i){var o,a,s,u,c,l,f,p,d,h,g,m=_e.hasData(e)&&_e.get(e);if(m&&(u=m.events)){for(t=(t||"").match(je)||[""],c=t.length;c--;)if(s=Ze.exec(t[c])||[],d=g=s[1],h=(s[2]||"").split(".").sort(),d){for(f=he.event.special[d]||{},d=(r?f.delegateType:f.bindType)||d,p=u[d]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=p.length;o--;)l=p[o],!i&&g!==l.origType||n&&n.guid!==l.guid||s&&!s.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(p.splice(o,1),l.selector&&p.delegateCount--,f.remove&&f.remove.call(e,l));a&&!p.length&&(f.teardown&&f.teardown.call(e,h,m.handle)!==!1||he.removeEvent(e,d,m.handle),delete u[d])}else for(d in u)he.event.remove(e,d+t[c],n,r,!0);he.isEmptyObject(u)&&_e.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=he.event.fix(e),u=new Array(arguments.length),c=(_e.get(this,"events")||{})[s.type]||[],l=he.event.special[s.type]||{};for(u[0]=s,t=1;t<arguments.length;t++)u[t]=arguments[t];if(s.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,s)!==!1){for(a=he.event.handlers.call(this,s,c),t=0;(i=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,r=((he.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u),void 0!==r&&(s.result=r)===!1&&(s.preventDefault(),s.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,c=e.target;if(u&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||c.disabled!==!0)){for(o=[],a={},n=0;n<u;n++)r=t[n],i=r.selector+" ",void 0===a[i]&&(a[i]=r.needsContext?he(i,this).index(c)>-1:he.find(i,this,null,[c]).length),a[i]&&o.push(r);o.length&&s.push({elem:c,handlers:o})}return c=this,u<t.length&&s.push({elem:c,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(he.Event.prototype,e,{enumerable:!0,configurable:!0,get:he.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[he.expando]?e:new he.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==T()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===T()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&he.nodeName(this,"input"))return this.click(),!1},_default:function(e){return he.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},he.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},he.Event=function(e,t){return this instanceof he.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?x:w,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&he.extend(this,t),this.timeStamp=e&&e.timeStamp||he.now(),void(this[he.expando]=!0)):new he.Event(e,t)},he.Event.prototype={constructor:he.Event,isDefaultPrevented:w,isPropagationStopped:w,isImmediatePropagationStopped:w,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=x,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=x,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=x,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},he.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Qe.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ke.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},he.event.addProp),he.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){he.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||he.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),he.fn.extend({on:function(e,t,n,r){return C(this,e,t,n,r)},one:function(e,t,n,r){return C(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,he(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return t!==!1&&"function"!=typeof t||(n=t,t=void 0),n===!1&&(n=w),this.each(function(){he.event.remove(this,e,n,t)})}});var et=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,tt=/<script|<style|<link/i,nt=/checked\s*(?:[^=]|=\s*.checked.)/i,rt=/^true\/(.*)/,it=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;he.extend({htmlPrefilter:function(e){return e.replace(et,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s=e.cloneNode(!0),u=he.contains(e.ownerDocument,e);if(!(pe.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||he.isXMLDoc(e)))for(a=v(s),o=v(e),r=0,i=o.length;r<i;r++)D(o[r],a[r]);if(t)if(n)for(o=o||v(e),a=a||v(s),r=0,i=o.length;r<i;r++)S(o[r],a[r]);else S(e,s);return a=v(s,"script"),a.length>0&&y(a,!u&&v(e,"script")),s},cleanData:function(e){for(var t,n,r,i=he.event.special,o=0;void 0!==(n=e[o]);o++)if(Fe(n)){if(t=n[_e.expando]){if(t.events)for(r in t.events)i[r]?he.event.remove(n,r):he.removeEvent(n,r,t.handle);n[_e.expando]=void 0}n[Me.expando]&&(n[Me.expando]=void 0)}}}),he.fn.extend({detach:function(e){return j(this,e,!0)},remove:function(e){return j(this,e)},text:function(e){return qe(this,function(e){return void 0===e?he.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=k(this,e);t.appendChild(e)}})},prepend:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=k(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(he.cleanData(v(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return he.clone(this,e,t)})},html:function(e){return qe(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!tt.test(e)&&!Xe[(ze.exec(e)||["",""])[1].toLowerCase()]){e=he.htmlPrefilter(e);try{for(;n<r;n++)t=this[n]||{},1===t.nodeType&&(he.cleanData(v(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return A(this,arguments,function(t){var n=this.parentNode;he.inArray(this,e)<0&&(he.cleanData(v(this)),n&&n.replaceChild(t,this))},e)}}),he.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){he.fn[e]=function(e){for(var n,r=[],i=he(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),he(i[a])[t](n),oe.apply(r,n.get());return this.pushStack(r)}});var ot=/^margin/,at=new RegExp("^("+Re+")(?!px)[a-z%]+$","i"),st=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(s){s.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Ye.appendChild(a);var t=e.getComputedStyle(s);n="1%"!==t.top,o="2px"===t.marginLeft,r="4px"===t.width,s.style.marginRight="50%",i="4px"===t.marginRight,Ye.removeChild(a),s=null}}var n,r,i,o,a=te.createElement("div"),s=te.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",pe.clearCloneStyle="content-box"===s.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(s),he.extend(pe,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),r},pixelMarginRight:function(){return t(),i},reliableMarginLeft:function(){return t(),o}}))}();var ut=/^(none|table(?!-c[ea]).+)/,ct={position:"absolute",visibility:"hidden",display:"block"},lt={letterSpacing:"0",fontWeight:"400"},ft=["Webkit","Moz","ms"],pt=te.createElement("div").style;he.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=L(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=he.camelCase(t),u=e.style;return t=he.cssProps[s]||(he.cssProps[s]=q(s)||s),a=he.cssHooks[t]||he.cssHooks[s],void 0===n?a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:u[t]:(o=typeof n,"string"===o&&(i=Pe.exec(n))&&i[1]&&(n=h(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(he.cssNumber[s]?"":"px")),pe.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u[t]=n)),void 0)}},css:function(e,t,n,r){var i,o,a,s=he.camelCase(t);return t=he.cssProps[s]||(he.cssProps[s]=q(s)||s),a=he.cssHooks[t]||he.cssHooks[s],a&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=L(e,t,r)),"normal"===i&&t in lt&&(i=lt[t]),""===n||n?(o=parseFloat(i),n===!0||isFinite(o)?o||0:i):i}}),he.each(["height","width"],function(e,t){he.cssHooks[t]={get:function(e,n,r){if(n)return!ut.test(he.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?M(e,t,r):We(e,ct,function(){return M(e,t,r)})},set:function(e,n,r){var i,o=r&&st(e),a=r&&_(e,t,r,"border-box"===he.css(e,"boxSizing",!1,o),o);return a&&(i=Pe.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=he.css(e,t)),F(e,n,a)}}}),he.cssHooks.marginLeft=O(pe.reliableMarginLeft,function(e,t){if(t)return(parseFloat(L(e,"marginLeft"))||e.getBoundingClientRect().left-We(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),he.each({margin:"",padding:"",border:"Width"},function(e,t){he.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+$e[r]+t]=o[r]||o[r-2]||o[0];return i}},ot.test(e)||(he.cssHooks[e+t].set=F)}),he.fn.extend({css:function(e,t){return qe(this,function(e,t,n){var r,i,o={},a=0;if(he.isArray(t)){for(r=st(e),i=t.length;a<i;a++)o[t[a]]=he.css(e,t[a],!1,r);return o}return void 0!==n?he.style(e,t,n):he.css(e,t)},e,t,arguments.length>1)}}),he.Tween=H,H.prototype={constructor:H,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||he.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(he.cssNumber[n]?"":"px")},cur:function(){var e=H.propHooks[this.prop];return e&&e.get?e.get(this):H.propHooks._default.get(this)},run:function(e){var t,n=H.propHooks[this.prop];return this.options.duration?this.pos=t=he.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):H.propHooks._default.set(this),this}},H.prototype.init.prototype=H.prototype,H.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=he.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){he.fx.step[e.prop]?he.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[he.cssProps[e.prop]]&&!he.cssHooks[e.prop]?e.elem[e.prop]=e.now:he.style(e.elem,e.prop,e.now+e.unit)}}},H.propHooks.scrollTop=H.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},he.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},he.fx=H.prototype.init,he.fx.step={};var dt,ht,gt=/^(?:toggle|show|hide)$/,mt=/queueHooks$/;he.Animation=he.extend(V,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return h(n.elem,e,Pe.exec(t),n),n}]},tweener:function(e,t){he.isFunction(e)?(t=e,e=["*"]):e=e.match(je);for(var n,r=0,i=e.length;r<i;r++)n=e[r],V.tweeners[n]=V.tweeners[n]||[],V.tweeners[n].unshift(t)},prefilters:[I],prefilter:function(e,t){t?V.prefilters.unshift(e):V.prefilters.push(e)}}),he.speed=function(e,t,n){var r=e&&"object"==typeof e?he.extend({},e):{complete:n||!n&&t||he.isFunction(e)&&e,duration:e,easing:n&&t||t&&!he.isFunction(t)&&t};return he.fx.off||te.hidden?r.duration=0:"number"!=typeof r.duration&&(r.duration in he.fx.speeds?r.duration=he.fx.speeds[r.duration]:r.duration=he.fx.speeds._default),null!=r.queue&&r.queue!==!0||(r.queue="fx"),r.old=r.complete,r.complete=function(){he.isFunction(r.old)&&r.old.call(this),r.queue&&he.dequeue(this,r.queue)},r},he.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Ie).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=he.isEmptyObject(e),o=he.speed(t,n,r),a=function(){var t=V(this,he.extend({},e),o);(i||_e.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||o.queue===!1?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=he.timers,a=_e.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&mt.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||he.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=_e.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=he.timers,a=r?r.length:0;for(n.finish=!0,he.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),he.each(["toggle","show","hide"],function(e,t){var n=he.fn[t];he.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(P(t,!0),e,r,i)}}),he.each({slideDown:P("show"),slideUp:P("hide"),slideToggle:P("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){he.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),he.timers=[],he.fx.tick=function(){var e,t=0,n=he.timers;for(dt=he.now();t<n.length;t++)e=n[t],e()||n[t]!==e||n.splice(t--,1);n.length||he.fx.stop(),dt=void 0},he.fx.timer=function(e){he.timers.push(e),e()?he.fx.start():he.timers.pop()},he.fx.interval=13,he.fx.start=function(){ht||(ht=e.requestAnimationFrame?e.requestAnimationFrame(B):e.setInterval(he.fx.tick,he.fx.interval))},he.fx.stop=function(){e.cancelAnimationFrame?e.cancelAnimationFrame(ht):e.clearInterval(ht),ht=null},he.fx.speeds={slow:600,fast:200,_default:400},he.fn.delay=function(t,n){return t=he.fx?he.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){
e.clearTimeout(i)}})},function(){var e=te.createElement("input"),t=te.createElement("select"),n=t.appendChild(te.createElement("option"));e.type="checkbox",pe.checkOn=""!==e.value,pe.optSelected=n.selected,e=te.createElement("input"),e.value="t",e.type="radio",pe.radioValue="t"===e.value}();var vt,yt=he.expr.attrHandle;he.fn.extend({attr:function(e,t){return qe(this,he.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){he.removeAttr(this,e)})}}),he.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?he.prop(e,t,n):(1===o&&he.isXMLDoc(e)||(i=he.attrHooks[t.toLowerCase()]||(he.expr.match.bool.test(t)?vt:void 0)),void 0!==n?null===n?void he.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:(r=he.find.attr(e,t),null==r?void 0:r))},attrHooks:{type:{set:function(e,t){if(!pe.radioValue&&"radio"===t&&he.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(je);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),vt={set:function(e,t,n){return t===!1?he.removeAttr(e,n):e.setAttribute(n,n),n}},he.each(he.expr.match.bool.source.match(/\w+/g),function(e,t){var n=yt[t]||he.find.attr;yt[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=yt[a],yt[a]=i,i=null!=n(e,t,r)?a:null,yt[a]=o),i}});var bt=/^(?:input|select|textarea|button)$/i,xt=/^(?:a|area)$/i;he.fn.extend({prop:function(e,t){return qe(this,he.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[he.propFix[e]||e]})}}),he.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&he.isXMLDoc(e)||(t=he.propFix[t]||t,i=he.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=he.find.attr(e,"tabindex");return t?parseInt(t,10):bt.test(e.nodeName)||xt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),pe.optSelected||(he.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),he.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){he.propFix[this.toLowerCase()]=this}),he.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,u=0;if(he.isFunction(e))return this.each(function(t){he(this).addClass(e.call(this,t,z(this)))});if("string"==typeof e&&e)for(t=e.match(je)||[];n=this[u++];)if(i=z(n),r=1===n.nodeType&&" "+U(i)+" "){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");s=U(r),i!==s&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,u=0;if(he.isFunction(e))return this.each(function(t){he(this).removeClass(e.call(this,t,z(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(je)||[];n=this[u++];)if(i=z(n),r=1===n.nodeType&&" "+U(i)+" "){for(a=0;o=t[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");s=U(r),i!==s&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):he.isFunction(e)?this.each(function(n){he(this).toggleClass(e.call(this,n,z(this),t),t)}):this.each(function(){var t,r,i,o;if("string"===n)for(r=0,i=he(this),o=e.match(je)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||(t=z(this),t&&_e.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||e===!1?"":_e.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+U(z(n))+" ").indexOf(t)>-1)return!0;return!1}});var wt=/\r/g;he.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=he.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,he(this).val()):e,null==i?i="":"number"==typeof i?i+="":he.isArray(i)&&(i=he.map(i,function(e){return null==e?"":e+""})),t=he.valHooks[this.type]||he.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return t=he.valHooks[i.type]||he.valHooks[i.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(wt,""):null==n?"":n)}}}),he.extend({valHooks:{option:{get:function(e){var t=he.find.attr(e,"value");return null!=t?t:U(he.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(n=i[r],(n.selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!he.nodeName(n.parentNode,"optgroup"))){if(t=he(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=he.makeArray(t),a=i.length;a--;)r=i[a],(r.selected=he.inArray(he.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),he.each(["radio","checkbox"],function(){he.valHooks[this]={set:function(e,t){if(he.isArray(t))return e.checked=he.inArray(he(e).val(),t)>-1}},pe.checkOn||(he.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Tt=/^(?:focusinfocus|focusoutblur)$/;he.extend(he.event,{trigger:function(t,n,r,i){var o,a,s,u,c,l,f,p=[r||te],d=ce.call(t,"type")?t.type:t,h=ce.call(t,"namespace")?t.namespace.split("."):[];if(a=s=r=r||te,3!==r.nodeType&&8!==r.nodeType&&!Tt.test(d+he.event.triggered)&&(d.indexOf(".")>-1&&(h=d.split("."),d=h.shift(),h.sort()),c=d.indexOf(":")<0&&"on"+d,t=t[he.expando]?t:new he.Event(d,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:he.makeArray(n,[t]),f=he.event.special[d]||{},i||!f.trigger||f.trigger.apply(r,n)!==!1)){if(!i&&!f.noBubble&&!he.isWindow(r)){for(u=f.delegateType||d,Tt.test(u+d)||(a=a.parentNode);a;a=a.parentNode)p.push(a),s=a;s===(r.ownerDocument||te)&&p.push(s.defaultView||s.parentWindow||e)}for(o=0;(a=p[o++])&&!t.isPropagationStopped();)t.type=o>1?u:f.bindType||d,l=(_e.get(a,"events")||{})[t.type]&&_e.get(a,"handle"),l&&l.apply(a,n),l=c&&a[c],l&&l.apply&&Fe(a)&&(t.result=l.apply(a,n),t.result===!1&&t.preventDefault());return t.type=d,i||t.isDefaultPrevented()||f._default&&f._default.apply(p.pop(),n)!==!1||!Fe(r)||c&&he.isFunction(r[d])&&!he.isWindow(r)&&(s=r[c],s&&(r[c]=null),he.event.triggered=d,r[d](),he.event.triggered=void 0,s&&(r[c]=s)),t.result}},simulate:function(e,t,n){var r=he.extend(new he.Event,n,{type:e,isSimulated:!0});he.event.trigger(r,null,t)}}),he.fn.extend({trigger:function(e,t){return this.each(function(){he.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return he.event.trigger(e,t,n,!0)}}),he.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){he.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),he.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),pe.focusin="onfocusin"in e,pe.focusin||he.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){he.event.simulate(t,e.target,he.event.fix(e))};he.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=_e.access(r,t);i||r.addEventListener(e,n,!0),_e.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=_e.access(r,t)-1;i?_e.access(r,t,i):(r.removeEventListener(e,n,!0),_e.remove(r,t))}}});var Ct=e.location,kt=he.now(),Et=/\?/;he.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||he.error("Invalid XML: "+t),n};var Nt=/\[\]$/,St=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,At=/^(?:input|select|textarea|keygen)/i;he.param=function(e,t){var n,r=[],i=function(e,t){var n=he.isFunction(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(he.isArray(e)||e.jquery&&!he.isPlainObject(e))he.each(e,function(){i(this.name,this.value)});else for(n in e)J(n,e[n],t,i);return r.join("&")},he.fn.extend({serialize:function(){return he.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=he.prop(this,"elements");return e?he.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!he(this).is(":disabled")&&At.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!Ue.test(e))}).map(function(e,t){var n=he(this).val();return null==n?null:he.isArray(n)?he.map(n,function(e){return{name:t.name,value:e.replace(St,"\r\n")}}):{name:t.name,value:n.replace(St,"\r\n")}}).get()}});var jt=/%20/g,Lt=/#.*$/,Ot=/([?&])_=[^&]*/,qt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ft=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,_t=/^(?:GET|HEAD)$/,Mt=/^\/\//,Ht={},Bt={},Rt="*/".concat("*"),Pt=te.createElement("a");Pt.href=Ct.href,he.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ct.href,type:"GET",isLocal:Ft.test(Ct.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Rt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":he.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Y(Y(e,he.ajaxSettings),t):Y(he.ajaxSettings,e)},ajaxPrefilter:X(Ht),ajaxTransport:X(Bt),ajax:function(t,n){function r(t,n,r,s){var c,p,d,x,w,T=n;l||(l=!0,u&&e.clearTimeout(u),i=void 0,a=s||"",C.readyState=t>0?4:0,c=t>=200&&t<300||304===t,r&&(x=Q(h,C,r)),x=K(h,x,C,c),c?(h.ifModified&&(w=C.getResponseHeader("Last-Modified"),w&&(he.lastModified[o]=w),w=C.getResponseHeader("etag"),w&&(he.etag[o]=w)),204===t||"HEAD"===h.type?T="nocontent":304===t?T="notmodified":(T=x.state,p=x.data,d=x.error,c=!d)):(d=T,!t&&T||(T="error",t<0&&(t=0))),C.status=t,C.statusText=(n||T)+"",c?v.resolveWith(g,[p,T,C]):v.rejectWith(g,[C,T,d]),C.statusCode(b),b=void 0,f&&m.trigger(c?"ajaxSuccess":"ajaxError",[C,h,c?p:d]),y.fireWith(g,[C,T]),f&&(m.trigger("ajaxComplete",[C,h]),--he.active||he.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,a,s,u,c,l,f,p,d,h=he.ajaxSetup({},n),g=h.context||h,m=h.context&&(g.nodeType||g.jquery)?he(g):he.event,v=he.Deferred(),y=he.Callbacks("once memory"),b=h.statusCode||{},x={},w={},T="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(l){if(!s)for(s={};t=qt.exec(a);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return l?a:null},setRequestHeader:function(e,t){return null==l&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==l&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(l)C.always(e[C.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||T;return i&&i.abort(t),r(0,t),this}};if(v.promise(C),h.url=((t||h.url||Ct.href)+"").replace(Mt,Ct.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(je)||[""],null==h.crossDomain){c=te.createElement("a");try{c.href=h.url,c.href=c.href,h.crossDomain=Pt.protocol+"//"+Pt.host!=c.protocol+"//"+c.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=he.param(h.data,h.traditional)),G(Ht,h,n,C),l)return C;f=he.event&&h.global,f&&0===he.active++&&he.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!_t.test(h.type),o=h.url.replace(Lt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(jt,"+")):(d=h.url.slice(o.length),h.data&&(o+=(Et.test(o)?"&":"?")+h.data,delete h.data),h.cache===!1&&(o=o.replace(Ot,"$1"),d=(Et.test(o)?"&":"?")+"_="+kt++ +d),h.url=o+d),h.ifModified&&(he.lastModified[o]&&C.setRequestHeader("If-Modified-Since",he.lastModified[o]),he.etag[o]&&C.setRequestHeader("If-None-Match",he.etag[o])),(h.data&&h.hasContent&&h.contentType!==!1||n.contentType)&&C.setRequestHeader("Content-Type",h.contentType),C.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Rt+"; q=0.01":""):h.accepts["*"]);for(p in h.headers)C.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(h.beforeSend.call(g,C,h)===!1||l))return C.abort();if(T="abort",y.add(h.complete),C.done(h.success),C.fail(h.error),i=G(Bt,h,n,C)){if(C.readyState=1,f&&m.trigger("ajaxSend",[C,h]),l)return C;h.async&&h.timeout>0&&(u=e.setTimeout(function(){C.abort("timeout")},h.timeout));try{l=!1,i.send(x,r)}catch(e){if(l)throw e;r(-1,e)}}else r(-1,"No Transport");return C},getJSON:function(e,t,n){return he.get(e,t,n,"json")},getScript:function(e,t){return he.get(e,void 0,t,"script")}}),he.each(["get","post"],function(e,t){he[t]=function(e,n,r,i){return he.isFunction(n)&&(i=i||r,r=n,n=void 0),he.ajax(he.extend({url:e,type:t,dataType:i,data:n,success:r},he.isPlainObject(e)&&e))}}),he._evalUrl=function(e){return he.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},he.fn.extend({wrapAll:function(e){var t;return this[0]&&(he.isFunction(e)&&(e=e.call(this[0])),t=he(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return he.isFunction(e)?this.each(function(t){he(this).wrapInner(e.call(this,t))}):this.each(function(){var t=he(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=he.isFunction(e);return this.each(function(n){he(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){he(this).replaceWith(this.childNodes)}),this}}),he.expr.pseudos.hidden=function(e){return!he.expr.pseudos.visible(e)},he.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},he.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var $t={0:200,1223:204},It=he.ajaxSettings.xhr();pe.cors=!!It&&"withCredentials"in It,pe.ajax=It=!!It,he.ajaxTransport(function(t){var n,r;if(pe.cors||It&&!t.crossDomain)return{send:function(i,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)s.setRequestHeader(a,i[a]);n=function(e){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o($t[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),he.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),he.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return he.globalEval(e),e}}}),he.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),he.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=he("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),te.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Wt=[],Vt=/(=)\?(?=&|$)|\?\?/;he.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Wt.pop()||he.expando+"_"+kt++;return this[e]=!0,e}}),he.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,a,s=t.jsonp!==!1&&(Vt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Vt.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=he.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Vt,"$1"+i):t.jsonp!==!1&&(t.url+=(Et.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||he.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){a=arguments},r.always(function(){void 0===o?he(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,Wt.push(i)),a&&he.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),pe.createHTMLDocument=function(){var e=te.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),he.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var r,i,o;return t||(pe.createHTMLDocument?(t=te.implementation.createHTMLDocument(""),r=t.createElement("base"),r.href=te.location.href,t.head.appendChild(r)):t=te),i=Ce.exec(e),o=!n&&[],i?[t.createElement(i[1])]:(i=b([e],t,o),o&&o.length&&he(o).remove(),he.merge([],i.childNodes))},he.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=U(e.slice(s)),e=e.slice(0,s)),he.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&he.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?he("<div>").append(he.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},he.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){he.fn[t]=function(e){return this.on(t,e)}}),he.expr.pseudos.animated=function(e){return he.grep(he.timers,function(t){return e===t.elem}).length},he.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,c,l=he.css(e,"position"),f=he(e),p={};"static"===l&&(e.style.position="relative"),s=f.offset(),o=he.css(e,"top"),u=he.css(e,"left"),c=("absolute"===l||"fixed"===l)&&(o+u).indexOf("auto")>-1,c?(r=f.position(),a=r.top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),he.isFunction(t)&&(t=t.call(e,n,he.extend({},s))),null!=t.top&&(p.top=t.top-s.top+a),null!=t.left&&(p.left=t.left-s.left+i),"using"in t?t.using.call(e,p):f.css(p)}},he.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){he.offset.setOffset(this,e,t)});var t,n,r,i,o=this[0];if(o)return o.getClientRects().length?(r=o.getBoundingClientRect(),r.width||r.height?(i=o.ownerDocument,n=Z(i),t=i.documentElement,{top:r.top+n.pageYOffset-t.clientTop,left:r.left+n.pageXOffset-t.clientLeft}):r):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===he.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),he.nodeName(e[0],"html")||(r=e.offset()),r={top:r.top+he.css(e[0],"borderTopWidth",!0),left:r.left+he.css(e[0],"borderLeftWidth",!0)}),{top:t.top-r.top-he.css(n,"marginTop",!0),left:t.left-r.left-he.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===he.css(e,"position");)e=e.offsetParent;return e||Ye})}}),he.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;he.fn[e]=function(r){return qe(this,function(e,r,i){var o=Z(e);return void 0===i?o?o[t]:e[r]:void(o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i)},e,r,arguments.length)}}),he.each(["top","left"],function(e,t){he.cssHooks[t]=O(pe.pixelPosition,function(e,n){if(n)return n=L(e,t),at.test(n)?he(e).position()[t]+"px":n})}),he.each({Height:"height",Width:"width"},function(e,t){he.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){he.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(i===!0||o===!0?"margin":"border");return qe(this,function(t,n,i){var o;return he.isWindow(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?he.css(t,n,s):he.style(t,n,i,s)},t,a?i:void 0,a)}})}),he.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),he.parseJSON=JSON.parse,"function"==typeof define&&define.amd&&define("jquery",[],function(){return he});var Ut=e.jQuery,zt=e.$;return he.noConflict=function(t){return e.$===he&&(e.$=zt),t&&e.jQuery===he&&(e.jQuery=Ut),he},t||(e.jQuery=e.$=he),he});var map,infowindow,service,FS_API_URLROOT="https://api.foursquare.com/v2/venues/search?";
//# sourceMappingURL=data:application/json;charset=utf8;base64,
